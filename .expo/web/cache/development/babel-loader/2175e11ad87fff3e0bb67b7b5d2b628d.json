{"ast":null,"code":"import invariant from 'invariant';\nimport { NativeEventEmitter, Platform } from 'react-native';\nconst nativeEmitterSubscriptionKey = '@@nativeEmitterSubscription@@';\nexport class EventEmitter {\n  _listenerCount = 0;\n  _nativeModule;\n  _eventEmitter;\n\n  constructor(nativeModule) {\n    this._nativeModule = nativeModule;\n    this._eventEmitter = new NativeEventEmitter(nativeModule);\n  }\n\n  addListener(eventName, listener) {\n    if (!this._listenerCount && Platform.OS !== 'ios' && this._nativeModule.startObserving) {\n      this._nativeModule.startObserving();\n    }\n\n    this._listenerCount++;\n\n    const nativeEmitterSubscription = this._eventEmitter.addListener(eventName, listener);\n\n    const subscription = {\n      [nativeEmitterSubscriptionKey]: nativeEmitterSubscription,\n      remove: () => {\n        this.removeSubscription(subscription);\n      }\n    };\n    return subscription;\n  }\n\n  removeAllListeners(eventName) {\n    // @ts-ignore: the EventEmitter interface has been changed in react-native@0.64.0\n    const removedListenerCount = this._eventEmitter.listenerCount ? // @ts-ignore: this is available since 0.64\n    this._eventEmitter.listenerCount(eventName) : // @ts-ignore: this is available in older versions\n    this._eventEmitter.listeners(eventName).length;\n\n    this._eventEmitter.removeAllListeners(eventName);\n\n    this._listenerCount -= removedListenerCount;\n    invariant(this._listenerCount >= 0, `EventEmitter must have a non-negative number of listeners`);\n\n    if (!this._listenerCount && Platform.OS !== 'ios' && this._nativeModule.stopObserving) {\n      this._nativeModule.stopObserving();\n    }\n  }\n\n  removeSubscription(subscription) {\n    const nativeEmitterSubscription = subscription[nativeEmitterSubscriptionKey];\n\n    if (!nativeEmitterSubscription) {\n      return;\n    }\n\n    if ('remove' in nativeEmitterSubscription) {\n      // `react-native-web@0.17.1` doesn't support `removeSubscription`\n      nativeEmitterSubscription.remove();\n    } else if ('removeSubscription' in this._eventEmitter) {\n      this._eventEmitter.removeSubscription(nativeEmitterSubscription);\n    }\n\n    this._listenerCount--; // Ensure that the emitter's internal state remains correct even if `removeSubscription` is\n    // called again with the same subscription\n\n    delete subscription[nativeEmitterSubscriptionKey]; // Release closed-over references to the emitter\n\n    subscription.remove = () => {};\n\n    if (!this._listenerCount && Platform.OS !== 'ios' && this._nativeModule.stopObserving) {\n      this._nativeModule.stopObserving();\n    }\n  }\n\n  emit(eventName, ...params) {\n    this._eventEmitter.emit(eventName, ...params);\n  }\n\n}","map":{"version":3,"sources":["../src/EventEmitter.ts"],"names":[],"mappings":"AAAA,OAAO,SAAP,MAAsB,WAAtB;AACA,SAAS,kBAAT,EAA6B,QAA7B,QAA6C,cAA7C;AAEA,MAAM,4BAA4B,GAAG,+BAArC;AAiBA,OAAM,MAAO,YAAP,CAAmB;EACvB,cAAc,GAAG,CAAH;EACd,aAAa;EACb,aAAa;;EAEb,WAAA,CAAY,YAAZ,EAAsC;IACpC,KAAK,aAAL,GAAqB,YAArB;IACA,KAAK,aAAL,GAAqB,IAAI,kBAAJ,CAAuB,YAAvB,CAArB;EACD;;EAED,WAAW,CAAI,SAAJ,EAAuB,QAAvB,EAAmD;IAC5D,IAAI,CAAC,KAAK,cAAN,IAAwB,QAAQ,CAAC,EAAT,KAAgB,KAAxC,IAAiD,KAAK,aAAL,CAAmB,cAAxE,EAAwF;MACtF,KAAK,aAAL,CAAmB,cAAnB;IACD;;IAED,KAAK,cAAL;;IACA,MAAM,yBAAyB,GAAG,KAAK,aAAL,CAAmB,WAAnB,CAA+B,SAA/B,EAA0C,QAA1C,CAAlC;;IACA,MAAM,YAAY,GAAG;MACnB,CAAC,4BAAD,GAAgC,yBADb;MAEnB,MAAM,EAAE,MAAK;QACX,KAAK,kBAAL,CAAwB,YAAxB;MACD;IAJkB,CAArB;IAMA,OAAO,YAAP;EACD;;EAED,kBAAkB,CAAC,SAAD,EAAkB;IAClC;IACA,MAAM,oBAAoB,GAAG,KAAK,aAAL,CAAmB,aAAnB,GACzB;IACA,KAAK,aAAL,CAAmB,aAAnB,CAAiC,SAAjC,CAFyB,GAGzB;IACA,KAAK,aAAL,CAAmB,SAAnB,CAA6B,SAA7B,EAAwC,MAJ5C;;IAKA,KAAK,aAAL,CAAmB,kBAAnB,CAAsC,SAAtC;;IACA,KAAK,cAAL,IAAuB,oBAAvB;IACA,SAAS,CACP,KAAK,cAAL,IAAuB,CADhB,EAEP,2DAFO,CAAT;;IAKA,IAAI,CAAC,KAAK,cAAN,IAAwB,QAAQ,CAAC,EAAT,KAAgB,KAAxC,IAAiD,KAAK,aAAL,CAAmB,aAAxE,EAAuF;MACrF,KAAK,aAAL,CAAmB,aAAnB;IACD;EACF;;EAED,kBAAkB,CAAC,YAAD,EAA2B;IAC3C,MAAM,yBAAyB,GAAG,YAAY,CAAC,4BAAD,CAA9C;;IACA,IAAI,CAAC,yBAAL,EAAgC;MAC9B;IACD;;IAED,IAAI,YAAY,yBAAhB,EAA2C;MACzC;MACA,yBAAyB,CAAC,MAA1B;IACD,CAHD,MAGO,IAAI,wBAAwB,KAAK,aAAjC,EAAgD;MACrD,KAAK,aAAL,CAAmB,kBAAnB,CAAsC,yBAAtC;IACD;;IACD,KAAK,cAAL,GAZ2C,CAc3C;IACA;;IACA,OAAO,YAAY,CAAC,4BAAD,CAAnB,CAhB2C,CAkB3C;;IACA,YAAY,CAAC,MAAb,GAAsB,MAAK,CAAG,CAA9B;;IAEA,IAAI,CAAC,KAAK,cAAN,IAAwB,QAAQ,CAAC,EAAT,KAAgB,KAAxC,IAAiD,KAAK,aAAL,CAAmB,aAAxE,EAAuF;MACrF,KAAK,aAAL,CAAmB,aAAnB;IACD;EACF;;EAED,IAAI,CAAC,SAAD,EAAoB,GAAG,MAAvB,EAAoC;IACtC,KAAK,aAAL,CAAmB,IAAnB,CAAwB,SAAxB,EAAmC,GAAG,MAAtC;EACD;;AAzEsB","sourcesContent":["import invariant from 'invariant';\nimport { NativeEventEmitter, Platform } from 'react-native';\n\nconst nativeEmitterSubscriptionKey = '@@nativeEmitterSubscription@@';\n\ntype NativeModule = {\n  startObserving?: () => void;\n  stopObserving?: () => void;\n  addListener: (eventName: string) => void;\n  removeListeners: (count: number) => void;\n};\n\n// @needsAudit\nexport type Subscription = {\n  /**\n   * A method to unsubscribe the listener.\n   */\n  remove: () => void;\n};\n\nexport class EventEmitter {\n  _listenerCount = 0;\n  _nativeModule: NativeModule;\n  _eventEmitter: NativeEventEmitter;\n\n  constructor(nativeModule: NativeModule) {\n    this._nativeModule = nativeModule;\n    this._eventEmitter = new NativeEventEmitter(nativeModule as any);\n  }\n\n  addListener<T>(eventName: string, listener: (event: T) => void): Subscription {\n    if (!this._listenerCount && Platform.OS !== 'ios' && this._nativeModule.startObserving) {\n      this._nativeModule.startObserving();\n    }\n\n    this._listenerCount++;\n    const nativeEmitterSubscription = this._eventEmitter.addListener(eventName, listener);\n    const subscription = {\n      [nativeEmitterSubscriptionKey]: nativeEmitterSubscription,\n      remove: () => {\n        this.removeSubscription(subscription);\n      },\n    };\n    return subscription;\n  }\n\n  removeAllListeners(eventName: string): void {\n    // @ts-ignore: the EventEmitter interface has been changed in react-native@0.64.0\n    const removedListenerCount = this._eventEmitter.listenerCount\n      ? // @ts-ignore: this is available since 0.64\n        this._eventEmitter.listenerCount(eventName)\n      : // @ts-ignore: this is available in older versions\n        this._eventEmitter.listeners(eventName).length;\n    this._eventEmitter.removeAllListeners(eventName);\n    this._listenerCount -= removedListenerCount;\n    invariant(\n      this._listenerCount >= 0,\n      `EventEmitter must have a non-negative number of listeners`\n    );\n\n    if (!this._listenerCount && Platform.OS !== 'ios' && this._nativeModule.stopObserving) {\n      this._nativeModule.stopObserving();\n    }\n  }\n\n  removeSubscription(subscription: Subscription): void {\n    const nativeEmitterSubscription = subscription[nativeEmitterSubscriptionKey];\n    if (!nativeEmitterSubscription) {\n      return;\n    }\n\n    if ('remove' in nativeEmitterSubscription) {\n      // `react-native-web@0.17.1` doesn't support `removeSubscription`\n      nativeEmitterSubscription.remove();\n    } else if ('removeSubscription' in this._eventEmitter) {\n      this._eventEmitter.removeSubscription(nativeEmitterSubscription!);\n    }\n    this._listenerCount--;\n\n    // Ensure that the emitter's internal state remains correct even if `removeSubscription` is\n    // called again with the same subscription\n    delete subscription[nativeEmitterSubscriptionKey];\n\n    // Release closed-over references to the emitter\n    subscription.remove = () => {};\n\n    if (!this._listenerCount && Platform.OS !== 'ios' && this._nativeModule.stopObserving) {\n      this._nativeModule.stopObserving();\n    }\n  }\n\n  emit(eventName: string, ...params: any[]): void {\n    this._eventEmitter.emit(eventName, ...params);\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}