{"ast":null,"code":"import PropTypes from 'prop-types';\nimport React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Color from \"./Color\";\nimport { StylePropType } from \"./utils\";\nimport { useChatContext } from \"./GiftedChatContext\";\nimport { useCallbackOne } from 'use-memo-one';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport function Actions(_ref) {\n  var _ref$options = _ref.options,\n      options = _ref$options === void 0 ? {} : _ref$options,\n      _ref$optionTintColor = _ref.optionTintColor,\n      optionTintColor = _ref$optionTintColor === void 0 ? Color.optionTintColor : _ref$optionTintColor,\n      icon = _ref.icon,\n      wrapperStyle = _ref.wrapperStyle,\n      iconTextStyle = _ref.iconTextStyle,\n      onPressActionButton = _ref.onPressActionButton,\n      containerStyle = _ref.containerStyle;\n\n  var _useChatContext = useChatContext(),\n      actionSheet = _useChatContext.actionSheet;\n\n  var onActionsPress = useCallbackOne(function () {\n    var optionKeys = Object.keys(options);\n    var cancelButtonIndex = optionKeys.indexOf('Cancel');\n    actionSheet().showActionSheetWithOptions({\n      options: optionKeys,\n      cancelButtonIndex: cancelButtonIndex,\n      tintColor: optionTintColor\n    }, function (buttonIndex) {\n      var key = optionKeys[buttonIndex];\n\n      if (key) {\n        options[key]();\n      }\n    });\n  }, []);\n  var renderIcon = useCallbackOne(function () {\n    if (icon) {\n      return icon();\n    }\n\n    return _jsx(View, {\n      style: [styles.wrapper, wrapperStyle],\n      children: _jsx(Text, {\n        style: [styles.iconText, iconTextStyle],\n        children: \"+\"\n      })\n    });\n  }, []);\n  return _jsx(TouchableOpacity, {\n    style: [styles.container, containerStyle],\n    onPress: onPressActionButton || onActionsPress,\n    children: renderIcon()\n  });\n}\nActions.propTypes = {\n  onSend: PropTypes.func,\n  options: PropTypes.object,\n  optionTintColor: PropTypes.string,\n  icon: PropTypes.func,\n  onPressActionButton: PropTypes.func,\n  wrapperStyle: StylePropType,\n  containerStyle: StylePropType\n};\nvar styles = StyleSheet.create({\n  container: {\n    width: 26,\n    height: 26,\n    marginLeft: 10,\n    marginBottom: 10\n  },\n  wrapper: {\n    borderRadius: 13,\n    borderColor: Color.defaultColor,\n    borderWidth: 2,\n    flex: 1\n  },\n  iconText: {\n    color: Color.defaultColor,\n    fontWeight: 'bold',\n    fontSize: 16,\n    backgroundColor: Color.backgroundTransparent,\n    textAlign: 'center'\n  }\n});","map":{"version":3,"sources":["../src/Actions.tsx"],"names":[],"mappings":"AAAA,OAAO,SAAP,MAAsB,YAAtB;AACA,OAAO,KAAP,MAAiC,OAAjC;;;;;AAUA,OAAO,KAAP;AACA,SAAS,aAAT;AACA,SAAS,cAAT;AACA,SAAS,cAAT,QAA+B,cAA/B;;AAYA,OAAM,SAAU,OAAV,OAQS;EAAA,wBAPb,OAOa;EAAA,IAPb,OAOa,6BAPH,EAOG;EAAA,gCANb,eAMa;EAAA,IANb,eAMa,qCANK,KAAK,CAAC,eAMX;EAAA,IALb,IAKa,QALb,IAKa;EAAA,IAJb,YAIa,QAJb,YAIa;EAAA,IAHb,aAGa,QAHb,aAGa;EAAA,IAFb,mBAEa,QAFb,mBAEa;EAAA,IADb,cACa,QADb,cACa;;EACb,sBAAwB,cAAc,EAAtC;EAAA,IAAQ,WAAR,mBAAQ,WAAR;;EACA,IAAM,cAAc,GAAG,cAAc,CAAC,YAAK;IACzC,IAAM,UAAU,GAAG,MAAM,CAAC,IAAP,CAAY,OAAZ,CAAnB;IACA,IAAM,iBAAiB,GAAG,UAAU,CAAC,OAAX,CAAmB,QAAnB,CAA1B;IACA,WAAW,GAAG,0BAAd,CACE;MACE,OAAO,EAAE,UADX;MAEE,iBAAiB,EAAjB,iBAFF;MAGE,SAAS,EAAE;IAHb,CADF,EAME,UAAC,WAAD,EAAwB;MACtB,IAAM,GAAG,GAAG,UAAU,CAAC,WAAD,CAAtB;;MACA,IAAI,GAAJ,EAAS;QACP,OAAO,CAAC,GAAD,CAAP;MACD;IACF,CAXH;EAaD,CAhBoC,EAgBlC,EAhBkC,CAArC;EAkBA,IAAM,UAAU,GAAG,cAAc,CAAC,YAAK;IACrC,IAAI,IAAJ,EAAU;MACR,OAAO,IAAI,EAAX;IACD;;IACD,OACE,KAAC,IAAD;MAAM,KAAK,EAAE,CAAC,MAAM,CAAC,OAAR,EAAiB,YAAjB,CAAb;MAAA,UACE,KAAC,IAAD;QAAM,KAAK,EAAE,CAAC,MAAM,CAAC,QAAR,EAAkB,aAAlB,CAAb;QAAA;MAAA;IADF,EADF;EAKD,CATgC,EAS9B,EAT8B,CAAjC;EAWA,OACE,KAAC,gBAAD;IACE,KAAK,EAAE,CAAC,MAAM,CAAC,SAAR,EAAmB,cAAnB,CADT;IAEE,OAAO,EAAE,mBAAmB,IAAI,cAFlC;IAAA,UAIG,UAAU;EAJb,EADF;AAQD;AAED,OAAO,CAAC,SAAR,GAAoB;EAClB,MAAM,EAAE,SAAS,CAAC,IADA;EAElB,OAAO,EAAE,SAAS,CAAC,MAFD;EAGlB,eAAe,EAAE,SAAS,CAAC,MAHT;EAIlB,IAAI,EAAE,SAAS,CAAC,IAJE;EAKlB,mBAAmB,EAAE,SAAS,CAAC,IALb;EAMlB,YAAY,EAAE,aANI;EAOlB,cAAc,EAAE;AAPE,CAApB;AAUA,IAAM,MAAM,GAAG,UAAU,CAAC,MAAX,CAAkB;EAC/B,SAAS,EAAE;IACT,KAAK,EAAE,EADE;IAET,MAAM,EAAE,EAFC;IAGT,UAAU,EAAE,EAHH;IAIT,YAAY,EAAE;EAJL,CADoB;EAO/B,OAAO,EAAE;IACP,YAAY,EAAE,EADP;IAEP,WAAW,EAAE,KAAK,CAAC,YAFZ;IAGP,WAAW,EAAE,CAHN;IAIP,IAAI,EAAE;EAJC,CAPsB;EAa/B,QAAQ,EAAE;IACR,KAAK,EAAE,KAAK,CAAC,YADL;IAER,UAAU,EAAE,MAFJ;IAGR,QAAQ,EAAE,EAHF;IAIR,eAAe,EAAE,KAAK,CAAC,qBAJf;IAKR,SAAS,EAAE;EALH;AAbqB,CAAlB,CAAf","sourceRoot":"","sourcesContent":["import PropTypes from 'prop-types';\nimport React from 'react';\nimport { StyleSheet, Text, TouchableOpacity, View, } from 'react-native';\nimport Color from './Color';\nimport { StylePropType } from './utils';\nimport { useChatContext } from './GiftedChatContext';\nimport { useCallbackOne } from 'use-memo-one';\nexport function Actions({ options = {}, optionTintColor = Color.optionTintColor, icon, wrapperStyle, iconTextStyle, onPressActionButton, containerStyle, }) {\n    const { actionSheet } = useChatContext();\n    const onActionsPress = useCallbackOne(() => {\n        const optionKeys = Object.keys(options);\n        const cancelButtonIndex = optionKeys.indexOf('Cancel');\n        actionSheet().showActionSheetWithOptions({\n            options: optionKeys,\n            cancelButtonIndex,\n            tintColor: optionTintColor,\n        }, (buttonIndex) => {\n            const key = optionKeys[buttonIndex];\n            if (key) {\n                options[key]();\n            }\n        });\n    }, []);\n    const renderIcon = useCallbackOne(() => {\n        if (icon) {\n            return icon();\n        }\n        return (<View style={[styles.wrapper, wrapperStyle]}>\n        <Text style={[styles.iconText, iconTextStyle]}>+</Text>\n      </View>);\n    }, []);\n    return (<TouchableOpacity style={[styles.container, containerStyle]} onPress={onPressActionButton || onActionsPress}>\n      {renderIcon()}\n    </TouchableOpacity>);\n}\nActions.propTypes = {\n    onSend: PropTypes.func,\n    options: PropTypes.object,\n    optionTintColor: PropTypes.string,\n    icon: PropTypes.func,\n    onPressActionButton: PropTypes.func,\n    wrapperStyle: StylePropType,\n    containerStyle: StylePropType,\n};\nconst styles = StyleSheet.create({\n    container: {\n        width: 26,\n        height: 26,\n        marginLeft: 10,\n        marginBottom: 10,\n    },\n    wrapper: {\n        borderRadius: 13,\n        borderColor: Color.defaultColor,\n        borderWidth: 2,\n        flex: 1,\n    },\n    iconText: {\n        color: Color.defaultColor,\n        fontWeight: 'bold',\n        fontSize: 16,\n        backgroundColor: Color.backgroundTransparent,\n        textAlign: 'center',\n    },\n});\n//# sourceMappingURL=Actions.js.map"]},"metadata":{},"sourceType":"module"}