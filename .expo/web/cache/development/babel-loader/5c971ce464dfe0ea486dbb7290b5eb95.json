{"ast":null,"code":"import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport dayjs from 'dayjs';\nimport Color from \"./Color\";\nimport { StylePropType, isSameDay } from \"./utils\";\nimport { DATE_FORMAT } from \"./Constant\";\nimport { useChatContext } from \"./GiftedChatContext\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar styles = StyleSheet.create({\n  container: {\n    alignItems: 'center',\n    justifyContent: 'center',\n    marginTop: 5,\n    marginBottom: 10\n  },\n  text: {\n    backgroundColor: Color.backgroundTransparent,\n    color: Color.defaultColor,\n    fontSize: 12,\n    fontWeight: '600'\n  }\n});\nexport function Day(_ref) {\n  var _ref$dateFormat = _ref.dateFormat,\n      dateFormat = _ref$dateFormat === void 0 ? DATE_FORMAT : _ref$dateFormat,\n      currentMessage = _ref.currentMessage,\n      previousMessage = _ref.previousMessage,\n      containerStyle = _ref.containerStyle,\n      wrapperStyle = _ref.wrapperStyle,\n      textStyle = _ref.textStyle;\n\n  var _useChatContext = useChatContext(),\n      getLocale = _useChatContext.getLocale;\n\n  if (currentMessage == null || isSameDay(currentMessage, previousMessage)) {\n    return null;\n  }\n\n  return _jsx(View, {\n    style: [styles.container, containerStyle],\n    children: _jsx(View, {\n      style: wrapperStyle,\n      children: _jsx(Text, {\n        style: [styles.text, textStyle],\n        children: dayjs(currentMessage.createdAt).locale(getLocale()).format(dateFormat)\n      })\n    })\n  });\n}\nDay.propTypes = {\n  currentMessage: PropTypes.object,\n  previousMessage: PropTypes.object,\n  nextMessage: PropTypes.object,\n  inverted: PropTypes.bool,\n  containerStyle: StylePropType,\n  wrapperStyle: StylePropType,\n  textStyle: StylePropType,\n  dateFormat: PropTypes.string\n};","map":{"version":3,"sources":["../src/Day.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAZ,MAAuB,OAAvB;AACA,OAAO,SAAP,MAAsB,YAAtB;;;;AAUA,OAAO,KAAP,MAAkB,OAAlB;AAEA,OAAO,KAAP;AACA,SAAS,aAAT,EAAwB,SAAxB;AACA,SAAS,WAAT;AAGA,SAAS,cAAT;;AAEA,IAAM,MAAM,GAAG,UAAU,CAAC,MAAX,CAAkB;EAC/B,SAAS,EAAE;IACT,UAAU,EAAE,QADH;IAET,cAAc,EAAE,QAFP;IAGT,SAAS,EAAE,CAHF;IAIT,YAAY,EAAE;EAJL,CADoB;EAO/B,IAAI,EAAE;IACJ,eAAe,EAAE,KAAK,CAAC,qBADnB;IAEJ,KAAK,EAAE,KAAK,CAAC,YAFT;IAGJ,QAAQ,EAAE,EAHN;IAIJ,UAAU,EAAE;EAJR;AAPyB,CAAlB,CAAf;AA2BA,OAAM,SAAU,GAAV,OAOe;EAAA,2BANnB,UAMmB;EAAA,IANnB,UAMmB,gCANN,WAMM;EAAA,IALnB,cAKmB,QALnB,cAKmB;EAAA,IAJnB,eAImB,QAJnB,eAImB;EAAA,IAHnB,cAGmB,QAHnB,cAGmB;EAAA,IAFnB,YAEmB,QAFnB,YAEmB;EAAA,IADnB,SACmB,QADnB,SACmB;;EACnB,sBAAsB,cAAc,EAApC;EAAA,IAAQ,SAAR,mBAAQ,SAAR;;EAEA,IAAI,cAAc,IAAI,IAAlB,IAA0B,SAAS,CAAC,cAAD,EAAiB,eAAjB,CAAvC,EAA0E;IACxE,OAAO,IAAP;EACD;;EAED,OACE,KAAC,IAAD;IAAM,KAAK,EAAE,CAAC,MAAM,CAAC,SAAR,EAAmB,cAAnB,CAAb;IAAA,UACE,KAAC,IAAD;MAAM,KAAK,EAAE,YAAb;MAAA,UACE,KAAC,IAAD;QAAM,KAAK,EAAE,CAAC,MAAM,CAAC,IAAR,EAAc,SAAd,CAAb;QAAA,UACG,KAAK,CAAC,cAAc,CAAC,SAAhB,CAAL,CACE,MADF,CACS,SAAS,EADlB,EAEE,MAFF,CAES,UAFT;MADH;IADF;EADF,EADF;AAWD;AAED,GAAG,CAAC,SAAJ,GAAgB;EACd,cAAc,EAAE,SAAS,CAAC,MADZ;EAEd,eAAe,EAAE,SAAS,CAAC,MAFb;EAGd,WAAW,EAAE,SAAS,CAAC,MAHT;EAId,QAAQ,EAAE,SAAS,CAAC,IAJN;EAKd,cAAc,EAAE,aALF;EAMd,YAAY,EAAE,aANA;EAOd,SAAS,EAAE,aAPG;EAQd,UAAU,EAAE,SAAS,CAAC;AARR,CAAhB","sourceRoot":"","sourcesContent":["import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { StyleSheet, Text, View, } from 'react-native';\nimport dayjs from 'dayjs';\nimport Color from './Color';\nimport { StylePropType, isSameDay } from './utils';\nimport { DATE_FORMAT } from './Constant';\nimport { useChatContext } from './GiftedChatContext';\nconst styles = StyleSheet.create({\n    container: {\n        alignItems: 'center',\n        justifyContent: 'center',\n        marginTop: 5,\n        marginBottom: 10,\n    },\n    text: {\n        backgroundColor: Color.backgroundTransparent,\n        color: Color.defaultColor,\n        fontSize: 12,\n        fontWeight: '600',\n    },\n});\nexport function Day({ dateFormat = DATE_FORMAT, currentMessage, previousMessage, containerStyle, wrapperStyle, textStyle, }) {\n    const { getLocale } = useChatContext();\n    if (currentMessage == null || isSameDay(currentMessage, previousMessage)) {\n        return null;\n    }\n    return (<View style={[styles.container, containerStyle]}>\n      <View style={wrapperStyle}>\n        <Text style={[styles.text, textStyle]}>\n          {dayjs(currentMessage.createdAt)\n            .locale(getLocale())\n            .format(dateFormat)}\n        </Text>\n      </View>\n    </View>);\n}\nDay.propTypes = {\n    currentMessage: PropTypes.object,\n    previousMessage: PropTypes.object,\n    nextMessage: PropTypes.object,\n    inverted: PropTypes.bool,\n    containerStyle: StylePropType,\n    wrapperStyle: StylePropType,\n    textStyle: StylePropType,\n    dateFormat: PropTypes.string,\n};\n//# sourceMappingURL=Day.js.map"]},"metadata":{},"sourceType":"module"}