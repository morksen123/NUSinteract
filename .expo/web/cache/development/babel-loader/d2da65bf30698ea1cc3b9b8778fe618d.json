{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState, useCallback, useEffect, useContext } from 'react';\nimport { UserContext } from \"../contexts/userContext\";\nimport { supabase } from \"../utils/supabase\";\nimport { GiftedChat } from 'react-native-gifted-chat';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nvar ChatScreen = function ChatScreen(props) {\n  var activity_id = props.route.params.activity_id;\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      messages = _useState2[0],\n      setMessages = _useState2[1];\n\n  var _useContext = useContext(UserContext),\n      user = _useContext.user;\n\n  useEffect(function () {\n    var getData = function _callee() {\n      var _await$supabase$from$, error, data, messageData;\n\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(supabase.from('messages').select('*, users(username)').match({\n                room_id: activity_id\n              }).order('created_at', {\n                ascending: false\n              }));\n\n            case 2:\n              _await$supabase$from$ = _context.sent;\n              error = _await$supabase$from$.error;\n              data = _await$supabase$from$.data;\n              messageData = data;\n              setMessages(messageData.map(function (doc) {\n                return {\n                  _id: doc.id,\n                  text: doc.content,\n                  createdAt: doc.created_at,\n                  user: {\n                    _id: doc.user_id,\n                    name: doc.users.username\n                  }\n                };\n              }));\n\n            case 7:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    getData();\n  }, []);\n  useEffect(function () {\n    var subscription = supabase.from('messages').on('INSERT', function (payload) {\n      setMessages(function (current) {\n        return [].concat(_toConsumableArray(current), [payload.new]);\n      });\n    }).subscribe();\n    return function () {\n      supabase.removeSubscription(subscription);\n    };\n  }, []);\n\n  var onSendHandler = function _callee2(message) {\n    var _await$supabase$from$2, error, data;\n\n    return _regeneratorRuntime.async(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return _regeneratorRuntime.awrap(supabase.from('messages').insert({\n              content: message,\n              user_id: user.id,\n              room_id: activity_id\n            }));\n\n          case 2:\n            _await$supabase$from$2 = _context2.sent;\n            error = _await$supabase$from$2.error;\n            data = _await$supabase$from$2.data;\n\n          case 5:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var _onSend = useCallback(function () {\n    var messages = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    setMessages(function (previousMessages) {\n      return GiftedChat.append(previousMessages, messages);\n    });\n    onSendHandler(messages[0].text);\n  }, []);\n\n  return _jsx(GiftedChat, {\n    messages: messages,\n    showAvatarForEveryMessage: true,\n    onSend: function onSend(messages) {\n      return _onSend(messages);\n    },\n    renderUsernameOnMessage: true,\n    user: {\n      _id: user.id,\n      name: user.user_metadata.username\n    }\n  });\n};\n\nexport default ChatScreen;","map":{"version":3,"names":["React","useState","useCallback","useEffect","useContext","UserContext","supabase","GiftedChat","ChatScreen","props","activity_id","route","params","messages","setMessages","user","getData","from","select","match","room_id","order","ascending","error","data","messageData","map","doc","_id","id","text","content","createdAt","created_at","user_id","name","users","username","subscription","on","payload","current","new","subscribe","removeSubscription","onSendHandler","message","insert","onSend","previousMessages","append","user_metadata"],"sources":["/Users/hanyang/Orbital2022/screens/ChatScreen.js"],"sourcesContent":["import React, { useState, useCallback, useEffect, useContext } from 'react'\n\nimport { UserContext } from '../contexts/userContext';\n\nimport { supabase } from '../utils/supabase';\n\nimport { GiftedChat } from 'react-native-gifted-chat'\n\nconst ChatScreen = (props) => {\n\n  const { route: { params: { activity_id }}} = props\n  const [messages, setMessages] = useState([]);\n\n  const { user } = useContext(UserContext)\n\n  useEffect(() => {\n    const getData = async () => {\n        const { error, data } = await supabase\n          .from('messages')\n          .select('*, users(username)')\n          .match({ room_id: activity_id })\n          .order('created_at', { ascending: false})\n\n        let messageData = data\n\n        setMessages(messageData.map(doc => ({\n            _id: doc.id,\n            text: doc.content,\n            createdAt: doc.created_at,\n            user: { \n                _id: doc.user_id,\n                name: doc.users.username,\n            }\n        })))\n    }\n\n    getData()\n  }, [])\n\n\n  /*\n  ** Enabling realtime on messages with supabase\n  */\n  useEffect(() => {\n    const subscription = supabase\n        .from('messages')\n        .on('INSERT', (payload) => {\n            setMessages((current) => [...current, payload.new])\n        })\n        .subscribe();\n\n    return () => {\n        supabase.removeSubscription(subscription)\n    }\n  }, [])\n          \n  /*\n  ** stores message in database\n  */\n  const onSendHandler = async (message) => {\n        const { error, data } = await supabase\n            .from('messages')\n            .insert({                 \n                content: message,\n                user_id: user.id,\n                room_id: activity_id\n            })            \n  }\n\n\n  const onSend = useCallback((messages = []) => {\n    setMessages(previousMessages => GiftedChat.append(previousMessages, messages))\n    onSendHandler(messages[0].text); \n    \n  }, [])\n\n  return (\n    <GiftedChat\n      messages={messages}\n      showAvatarForEveryMessage={true}\n      onSend={messages => onSend(messages)}\n      renderUsernameOnMessage={true}\n      user={{\n        _id: user.id,\n        name: user.user_metadata.username\n      }} \n    />\n  )\n}\n\nexport default ChatScreen; "],"mappings":"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"},"metadata":{},"sourceType":"module"}