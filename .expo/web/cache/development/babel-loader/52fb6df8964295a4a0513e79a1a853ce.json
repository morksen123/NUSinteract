{"ast":null,"code":"import { useCallback, useEffect, useRef, useState } from 'react';\n/**\n * Get or request permission for protected functionality within the app.\n * It uses separate permission requesters to interact with a single permission.\n * By default, the hook will only retrieve the permission status.\n */\n\nfunction usePermission(methods, options) {\n  const isMounted = useRef(true);\n  const [status, setStatus] = useState(null);\n  const {\n    get = true,\n    request = false,\n    ...permissionOptions\n  } = options || {};\n  const getPermission = useCallback(async () => {\n    const response = await methods.getMethod(Object.keys(permissionOptions).length > 0 ? permissionOptions : undefined);\n    if (isMounted.current) setStatus(response);\n    return response;\n  }, [methods.getMethod]);\n  const requestPermission = useCallback(async () => {\n    const response = await methods.requestMethod(Object.keys(permissionOptions).length > 0 ? permissionOptions : undefined);\n    if (isMounted.current) setStatus(response);\n    return response;\n  }, [methods.requestMethod]);\n  useEffect(function runMethods() {\n    if (request) requestPermission();\n    if (!request && get) getPermission();\n  }, [get, request, requestPermission, getPermission]); // Workaround for unmounting components receiving state updates\n\n  useEffect(function didMount() {\n    isMounted.current = true;\n    return () => {\n      isMounted.current = false;\n    };\n  }, []);\n  return [status, requestPermission, getPermission];\n}\n/**\n * Create a new permission hook with the permission methods built-in.\n * This can be used to quickly create specific permission hooks in every module.\n */\n\n\nexport function createPermissionHook(methods) {\n  return options => usePermission(methods, options);\n}","map":{"version":3,"sources":["../src/PermissionsHook.ts"],"names":[],"mappings":"AAAA,SAAS,WAAT,EAAsB,SAAtB,EAAiC,MAAjC,EAAyC,QAAzC,QAAyD,OAAzD;AAwBA;;;;AAIG;;AACH,SAAS,aAAT,CACE,OADF,EAEE,OAFF,EAE0C;EAExC,MAAM,SAAS,GAAG,MAAM,CAAC,IAAD,CAAxB;EACA,MAAM,CAAC,MAAD,EAAS,SAAT,IAAsB,QAAQ,CAAoB,IAApB,CAApC;EACA,MAAM;IAAE,GAAG,GAAG,IAAR;IAAc,OAAO,GAAG,KAAxB;IAA+B,GAAG;EAAlC,IAAwD,OAAO,IAAI,EAAzE;EAEA,MAAM,aAAa,GAAG,WAAW,CAAC,YAAW;IAC3C,MAAM,QAAQ,GAAG,MAAM,OAAO,CAAC,SAAR,CACrB,MAAM,CAAC,IAAP,CAAY,iBAAZ,EAA+B,MAA/B,GAAwC,CAAxC,GAA6C,iBAA7C,GAA6E,SADxD,CAAvB;IAGA,IAAI,SAAS,CAAC,OAAd,EAAuB,SAAS,CAAC,QAAD,CAAT;IACvB,OAAO,QAAP;EACD,CANgC,EAM9B,CAAC,OAAO,CAAC,SAAT,CAN8B,CAAjC;EAQA,MAAM,iBAAiB,GAAG,WAAW,CAAC,YAAW;IAC/C,MAAM,QAAQ,GAAG,MAAM,OAAO,CAAC,aAAR,CACrB,MAAM,CAAC,IAAP,CAAY,iBAAZ,EAA+B,MAA/B,GAAwC,CAAxC,GAA6C,iBAA7C,GAA6E,SADxD,CAAvB;IAGA,IAAI,SAAS,CAAC,OAAd,EAAuB,SAAS,CAAC,QAAD,CAAT;IACvB,OAAO,QAAP;EACD,CANoC,EAMlC,CAAC,OAAO,CAAC,aAAT,CANkC,CAArC;EAQA,SAAS,CACP,SAAS,UAAT,GAAmB;IACjB,IAAI,OAAJ,EAAa,iBAAiB;IAC9B,IAAI,CAAC,OAAD,IAAY,GAAhB,EAAqB,aAAa;EACnC,CAJM,EAKP,CAAC,GAAD,EAAM,OAAN,EAAe,iBAAf,EAAkC,aAAlC,CALO,CAAT,CAtBwC,CA8BxC;;EACA,SAAS,CAAC,SAAS,QAAT,GAAiB;IACzB,SAAS,CAAC,OAAV,GAAoB,IAApB;IACA,OAAO,MAAK;MACV,SAAS,CAAC,OAAV,GAAoB,KAApB;IACD,CAFD;EAGD,CALQ,EAKN,EALM,CAAT;EAOA,OAAO,CAAC,MAAD,EAAS,iBAAT,EAA4B,aAA5B,CAAP;AACD;AAED;;;AAGG;;;AACH,OAAM,SAAU,oBAAV,CACJ,OADI,EAC+C;EAEnD,OAAQ,OAAD,IACL,aAAa,CAAsB,OAAtB,EAA+B,OAA/B,CADf;AAED","sourcesContent":["import { useCallback, useEffect, useRef, useState } from 'react';\n\nimport { PermissionResponse } from './PermissionsInterface';\n\n// These types are identical, but improves the readability for suggestions in editors\ntype RequestPermissionMethod<Permission extends PermissionResponse> = () => Promise<Permission>;\ntype GetPermissionMethod<Permission extends PermissionResponse> = () => Promise<Permission>;\n\ninterface PermissionHookMethods<Permission extends PermissionResponse, Options = never> {\n  /** The permission method that requests the user to grant permission. */\n  requestMethod: (options?: Options) => Promise<Permission>;\n  /** The permission method that only fetches the current permission status. */\n  getMethod: (options?: Options) => Promise<Permission>;\n}\n\ninterface PermissionHookBehavior {\n  /** If the hook should automatically fetch the current permission status, without asking the user. */\n  get?: boolean;\n  /** If the hook should automatically request the user to grant permission. */\n  request?: boolean;\n}\n\nexport type PermissionHookOptions<Options extends object> = PermissionHookBehavior & Options;\n\n/**\n * Get or request permission for protected functionality within the app.\n * It uses separate permission requesters to interact with a single permission.\n * By default, the hook will only retrieve the permission status.\n */\nfunction usePermission<Permission extends PermissionResponse, Options extends object>(\n  methods: PermissionHookMethods<Permission, Options>,\n  options?: PermissionHookOptions<Options>\n): [Permission | null, RequestPermissionMethod<Permission>, GetPermissionMethod<Permission>] {\n  const isMounted = useRef(true);\n  const [status, setStatus] = useState<Permission | null>(null);\n  const { get = true, request = false, ...permissionOptions } = options || {};\n\n  const getPermission = useCallback(async () => {\n    const response = await methods.getMethod(\n      Object.keys(permissionOptions).length > 0 ? (permissionOptions as Options) : undefined\n    );\n    if (isMounted.current) setStatus(response);\n    return response;\n  }, [methods.getMethod]);\n\n  const requestPermission = useCallback(async () => {\n    const response = await methods.requestMethod(\n      Object.keys(permissionOptions).length > 0 ? (permissionOptions as Options) : undefined\n    );\n    if (isMounted.current) setStatus(response);\n    return response;\n  }, [methods.requestMethod]);\n\n  useEffect(\n    function runMethods() {\n      if (request) requestPermission();\n      if (!request && get) getPermission();\n    },\n    [get, request, requestPermission, getPermission]\n  );\n\n  // Workaround for unmounting components receiving state updates\n  useEffect(function didMount() {\n    isMounted.current = true;\n    return () => {\n      isMounted.current = false;\n    };\n  }, []);\n\n  return [status, requestPermission, getPermission];\n}\n\n/**\n * Create a new permission hook with the permission methods built-in.\n * This can be used to quickly create specific permission hooks in every module.\n */\nexport function createPermissionHook<Permission extends PermissionResponse, Options extends object>(\n  methods: PermissionHookMethods<Permission, Options>\n) {\n  return (options?: PermissionHookOptions<Options>) =>\n    usePermission<Permission, Options>(methods, options);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}