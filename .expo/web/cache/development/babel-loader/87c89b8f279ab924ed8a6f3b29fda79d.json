{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { PermissionStatus, createPermissionHook, UnavailabilityError, CodedError } from 'expo-modules-core';\nimport ExponentImagePicker from \"./ExponentImagePicker\";\nimport { MediaTypeOptions, VideoExportPreset, UIImagePickerControllerQualityType, UIImagePickerPresentationStyle } from \"./ImagePicker.types\";\n\nfunction validateOptions(options) {\n  var aspect = options.aspect,\n      quality = options.quality,\n      videoMaxDuration = options.videoMaxDuration;\n\n  if (aspect != null) {\n    var _aspect = _slicedToArray(aspect, 2),\n        x = _aspect[0],\n        y = _aspect[1];\n\n    if (x <= 0 || y <= 0) {\n      throw new CodedError('ERR_INVALID_ARGUMENT', \"Invalid aspect ratio values \" + x + \":\" + y + \". Provide positive numbers.\");\n    }\n  }\n\n  if (quality && (quality < 0 || quality > 1)) {\n    throw new CodedError('ERR_INVALID_ARGUMENT', \"Invalid 'quality' value \" + quality + \". Provide a value between 0 and 1.\");\n  }\n\n  if (videoMaxDuration && videoMaxDuration < 0) {\n    throw new CodedError('ERR_INVALID_ARGUMENT', \"Invalid 'videoMaxDuration' value \" + videoMaxDuration + \". Provide a non-negative number.\");\n  }\n\n  return options;\n}\n\nexport function getCameraPermissionsAsync() {\n  return _regeneratorRuntime.async(function getCameraPermissionsAsync$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          return _context.abrupt(\"return\", ExponentImagePicker.getCameraPermissionsAsync());\n\n        case 1:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function getCameraRollPermissionsAsync() {\n  return _regeneratorRuntime.async(function getCameraRollPermissionsAsync$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          console.warn('ImagePicker.getCameraRollPermissionsAsync() is deprecated in favour of ImagePicker.getMediaLibraryPermissionsAsync()');\n          return _context2.abrupt(\"return\", getMediaLibraryPermissionsAsync());\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function getMediaLibraryPermissionsAsync() {\n  var writeOnly,\n      _args3 = arguments;\n  return _regeneratorRuntime.async(function getMediaLibraryPermissionsAsync$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          writeOnly = _args3.length > 0 && _args3[0] !== undefined ? _args3[0] : false;\n          return _context3.abrupt(\"return\", ExponentImagePicker.getMediaLibraryPermissionsAsync(writeOnly));\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function requestCameraPermissionsAsync() {\n  return _regeneratorRuntime.async(function requestCameraPermissionsAsync$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          return _context4.abrupt(\"return\", ExponentImagePicker.requestCameraPermissionsAsync());\n\n        case 1:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function requestCameraRollPermissionsAsync() {\n  return _regeneratorRuntime.async(function requestCameraRollPermissionsAsync$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          console.warn('ImagePicker.requestCameraRollPermissionsAsync() is deprecated in favour of ImagePicker.requestMediaLibraryPermissionsAsync()');\n          return _context5.abrupt(\"return\", requestMediaLibraryPermissionsAsync());\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function requestMediaLibraryPermissionsAsync() {\n  var writeOnly,\n      imagePickerMethod,\n      _args6 = arguments;\n  return _regeneratorRuntime.async(function requestMediaLibraryPermissionsAsync$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          writeOnly = _args6.length > 0 && _args6[0] !== undefined ? _args6[0] : false;\n          imagePickerMethod = ExponentImagePicker.requestMediaLibraryPermissionsAsync;\n          return _context6.abrupt(\"return\", imagePickerMethod(writeOnly));\n\n        case 3:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport var useMediaLibraryPermissions = createPermissionHook({\n  getMethod: function getMethod(options) {\n    return getMediaLibraryPermissionsAsync(options == null ? void 0 : options.writeOnly);\n  },\n  requestMethod: function requestMethod(options) {\n    return requestMediaLibraryPermissionsAsync(options == null ? void 0 : options.writeOnly);\n  }\n});\nexport var useCameraPermissions = createPermissionHook({\n  getMethod: getCameraPermissionsAsync,\n  requestMethod: requestCameraPermissionsAsync\n});\nexport function getPendingResultAsync() {\n  return _regeneratorRuntime.async(function getPendingResultAsync$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          if (!ExponentImagePicker.getPendingResultAsync) {\n            _context7.next = 2;\n            break;\n          }\n\n          return _context7.abrupt(\"return\", ExponentImagePicker.getPendingResultAsync());\n\n        case 2:\n          return _context7.abrupt(\"return\", []);\n\n        case 3:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function launchCameraAsync() {\n  var options,\n      _args8 = arguments;\n  return _regeneratorRuntime.async(function launchCameraAsync$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          options = _args8.length > 0 && _args8[0] !== undefined ? _args8[0] : {};\n\n          if (ExponentImagePicker.launchCameraAsync) {\n            _context8.next = 3;\n            break;\n          }\n\n          throw new UnavailabilityError('ImagePicker', 'launchCameraAsync');\n\n        case 3:\n          _context8.next = 5;\n          return _regeneratorRuntime.awrap(ExponentImagePicker.launchCameraAsync(validateOptions(options)));\n\n        case 5:\n          return _context8.abrupt(\"return\", _context8.sent);\n\n        case 6:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function launchImageLibraryAsync(options) {\n  return _regeneratorRuntime.async(function launchImageLibraryAsync$(_context9) {\n    while (1) {\n      switch (_context9.prev = _context9.next) {\n        case 0:\n          if (ExponentImagePicker.launchImageLibraryAsync) {\n            _context9.next = 2;\n            break;\n          }\n\n          throw new UnavailabilityError('ImagePicker', 'launchImageLibraryAsync');\n\n        case 2:\n          _context9.next = 4;\n          return _regeneratorRuntime.awrap(ExponentImagePicker.launchImageLibraryAsync(options != null ? options : {}));\n\n        case 4:\n          return _context9.abrupt(\"return\", _context9.sent);\n\n        case 5:\n        case \"end\":\n          return _context9.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport { MediaTypeOptions, VideoExportPreset, PermissionStatus, UIImagePickerControllerQualityType, UIImagePickerPresentationStyle };","map":{"version":3,"sources":["../src/ImagePicker.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  PermissionStatus,\n  PermissionExpiration,\n  PermissionHookOptions,\n  PermissionResponse,\n  createPermissionHook,\n  UnavailabilityError,\n  CodedError,\n} from 'expo-modules-core';\n\nimport ExponentImagePicker from './ExponentImagePicker';\nimport {\n  CameraPermissionResponse,\n  CameraRollPermissionResponse,\n  MediaLibraryPermissionResponse,\n  ImagePickerResult,\n  ImagePickerErrorResult,\n  MediaTypeOptions,\n  ImagePickerOptions,\n  VideoExportPreset,\n  ExpandImagePickerResult,\n  ImageInfo,\n  ImagePickerMultipleResult,\n  ImagePickerCancelledResult,\n  OpenFileBrowserOptions,\n  UIImagePickerControllerQualityType,\n  UIImagePickerPresentationStyle,\n} from './ImagePicker.types';\n\nfunction validateOptions(options: ImagePickerOptions) {\n  const { aspect, quality, videoMaxDuration } = options;\n\n  if (aspect != null) {\n    const [x, y] = aspect;\n\n    if (x <= 0 || y <= 0) {\n      throw new CodedError(\n        'ERR_INVALID_ARGUMENT',\n        `Invalid aspect ratio values ${x}:${y}. Provide positive numbers.`\n      );\n    }\n  }\n\n  if (quality && (quality < 0 || quality > 1)) {\n    throw new CodedError(\n      'ERR_INVALID_ARGUMENT',\n      `Invalid 'quality' value ${quality}. Provide a value between 0 and 1.`\n    );\n  }\n\n  if (videoMaxDuration && videoMaxDuration < 0) {\n    throw new CodedError(\n      'ERR_INVALID_ARGUMENT',\n      `Invalid 'videoMaxDuration' value ${videoMaxDuration}. Provide a non-negative number.`\n    );\n  }\n\n  return options;\n}\n\n// @needsAudit\n/**\n * Checks user's permissions for accessing camera.\n * @return A promise that fulfills with an object of type [CameraPermissionResponse](#camerarollpermissionresponse).\n */\nexport async function getCameraPermissionsAsync(): Promise<CameraPermissionResponse> {\n  return ExponentImagePicker.getCameraPermissionsAsync();\n}\n\n/**\n * @deprecated Use `getMediaLibraryPermissionsAsync()` instead.\n */\nexport async function getCameraRollPermissionsAsync(): Promise<MediaLibraryPermissionResponse> {\n  console.warn(\n    'ImagePicker.getCameraRollPermissionsAsync() is deprecated in favour of ImagePicker.getMediaLibraryPermissionsAsync()'\n  );\n  return getMediaLibraryPermissionsAsync();\n}\n\n// @needsAudit\n/**\n * Checks user's permissions for accessing photos.\n * @param writeOnly Whether to request write or read and write permissions. Defaults to `false`\n * @return A promise that fulfills with an object of type [MediaLibraryPermissionResponse](#medialibrarypermissionresponse).\n */\nexport async function getMediaLibraryPermissionsAsync(\n  writeOnly: boolean = false\n): Promise<MediaLibraryPermissionResponse> {\n  return ExponentImagePicker.getMediaLibraryPermissionsAsync(writeOnly);\n}\n\n// @needsAudit\n/**\n * Asks the user to grant permissions for accessing camera. This does nothing on web because the\n * browser camera is not used.\n * @return A promise that fulfills with an object of type [CameraPermissionResponse](#camerarollpermissionresponse).\n */\nexport async function requestCameraPermissionsAsync(): Promise<CameraPermissionResponse> {\n  return ExponentImagePicker.requestCameraPermissionsAsync();\n}\n\n/**\n * @deprecated Use `requestMediaLibraryPermissionsAsync()` instead.\n */\nexport async function requestCameraRollPermissionsAsync(): Promise<MediaLibraryPermissionResponse> {\n  console.warn(\n    'ImagePicker.requestCameraRollPermissionsAsync() is deprecated in favour of ImagePicker.requestMediaLibraryPermissionsAsync()'\n  );\n  return requestMediaLibraryPermissionsAsync();\n}\n\n// @needsAudit\n/**\n * Asks the user to grant permissions for accessing user's photo. This method does nothing on web.\n * @param writeOnly Whether to request write or read and write permissions. Defaults to `false`\n * @return A promise that fulfills with an object of type [MediaLibraryPermissionResponse](#medialibrarypermissionresponse).\n */\nexport async function requestMediaLibraryPermissionsAsync(\n  writeOnly: boolean = false\n): Promise<MediaLibraryPermissionResponse> {\n  const imagePickerMethod = ExponentImagePicker.requestMediaLibraryPermissionsAsync;\n  return imagePickerMethod(writeOnly);\n}\n\n// @needsAudit\n/**\n * Check or request permissions to access the media library.\n * This uses both `requestMediaLibraryPermissionsAsync` and `getMediaLibraryPermissionsAsync` to interact with the permissions.\n *\n * @example\n * ```ts\n * const [status, requestPermission] = ImagePicker.useMediaLibraryPermissions();\n * ```\n */\nexport const useMediaLibraryPermissions = createPermissionHook<\n  MediaLibraryPermissionResponse,\n  { writeOnly?: boolean }\n>({\n  // TODO(cedric): permission requesters should have an options param or a different requester\n  getMethod: (options) => getMediaLibraryPermissionsAsync(options?.writeOnly),\n  requestMethod: (options) => requestMediaLibraryPermissionsAsync(options?.writeOnly),\n});\n\n// @needsAudit\n/**\n * Check or request permissions to access the camera.\n * This uses both `requestCameraPermissionsAsync` and `getCameraPermissionsAsync` to interact with the permissions.\n *\n * @example\n * ```ts\n * const [status, requestPermission] = ImagePicker.useCameraPermissions();\n * ```\n */\nexport const useCameraPermissions = createPermissionHook({\n  getMethod: getCameraPermissionsAsync,\n  requestMethod: requestCameraPermissionsAsync,\n});\n\n// @needsAudit\n/**\n * Android system sometimes kills the `MainActivity` after the `ImagePicker` finishes. When this\n * happens, we lost the data selected from the `ImagePicker`. However, you can retrieve the lost\n * data by calling `getPendingResultAsync`. You can test this functionality by turning on\n * `Don't keep activities` in the developer options.\n * @return\n * - **On Android:** a promise that resolves to an array of objects of exactly same type as in\n * `ImagePicker.launchImageLibraryAsync` or `ImagePicker.launchCameraAsync` if the `ImagePicker`\n * finished successfully. Otherwise, to the array of [`ImagePickerErrorResult`](#imagepickerimagepickererrorresult).\n * - **On other platforms:** an empty array.\n */\nexport async function getPendingResultAsync(): Promise<\n  (ImagePickerResult | ImagePickerErrorResult)[]\n> {\n  if (ExponentImagePicker.getPendingResultAsync) {\n    return ExponentImagePicker.getPendingResultAsync();\n  }\n  return [];\n}\n\n// @needsAudit\n/**\n * Display the system UI for taking a photo with the camera. Requires `Permissions.CAMERA`.\n * On Android and iOS 10 `Permissions.CAMERA_ROLL` is also required. On mobile web, this must be\n * called immediately in a user interaction like a button press, otherwise the browser will bloc\n * the request without a warning.\n * > **Note:** Make sure that you handle `MainActivity` destruction on **Android**. See [ImagePicker.getPendingResultAsync](#imagepickergetpendingresultasync).\n * > **Notes for Web:** The system UI can only be shown after user activation (e.g. a `Button` press).\n * Therefore, calling `launchCameraAsync` in `componentDidMount`, for example, will **not** work as\n * intended. The `cancelled` event will not be returned in the browser due to platform restrictions\n * and inconsistencies across browsers.\n * @param options An `ImagePickerOptions` object.\n * @return If the user cancelled the action, the method returns `{ cancelled: true }`. Otherwise,\n * this method returns information about the selected media item. When the chosen item is an image,\n * this method returns `{ cancelled: false, type: 'image', uri, width, height, exif, base64 }`;\n * when the item is a video, this method returns `{ cancelled: false, type: 'video', uri, width, height, duration }`.\n */\nexport async function launchCameraAsync(\n  options: ImagePickerOptions = {}\n): Promise<ImagePickerResult> {\n  if (!ExponentImagePicker.launchCameraAsync) {\n    throw new UnavailabilityError('ImagePicker', 'launchCameraAsync');\n  }\n  return await ExponentImagePicker.launchCameraAsync(validateOptions(options));\n}\n\n// @needsAudit\n/**\n * Display the system UI for choosing an image or a video from the phone's library.\n * Requires `Permissions.MEDIA_LIBRARY` on iOS 10 only. On mobile web, this must be called\n * immediately in a user interaction like a button press, otherwise the browser will block the\n * request without a warning.\n * **Animated GIFs support** If the selected image is an animated GIF, the result image will be an\n * animated GIF too if and only if `quality` is set to `undefined` and `allowsEditing` is set to `false`.\n * Otherwise compression and/or cropper will pick the first frame of the GIF and return it as the\n * result (on Android the result will be a PNG, on iOS — GIF).\n * > **Notes for Web:** The system UI can only be shown after user activation (e.g. a `Button` press).\n * Therefore, calling `launchImageLibraryAsync` in `componentDidMount`, for example, will **not**\n * work as intended. The `cancelled` event will not be returned in the browser due to platform\n * restrictions and inconsistencies across browsers.\n * @param options An object extended by [`ImagePickerOptions`](#imagepickeroptions).\n * @return If the user cancelled the action, the method returns `{ cancelled: true }`. Otherwise,\n * this method returns information about the selected media item. When the chosen item is an image,\n * this method returns `{ cancelled: false, type: 'image', uri, width, height, exif, base64 }`;\n * when the item is a video, this method returns `{ cancelled: false, type: 'video', uri, width, height, duration }`.\n */\nexport async function launchImageLibraryAsync<T extends ImagePickerOptions>(\n  options?: T\n): Promise<ExpandImagePickerResult<T>> {\n  if (!ExponentImagePicker.launchImageLibraryAsync) {\n    throw new UnavailabilityError('ImagePicker', 'launchImageLibraryAsync');\n  }\n  return await ExponentImagePicker.launchImageLibraryAsync(options ?? {});\n}\n\nexport {\n  MediaTypeOptions,\n  ImagePickerOptions,\n  ImagePickerResult,\n  ImagePickerErrorResult,\n  VideoExportPreset,\n  CameraPermissionResponse,\n  CameraRollPermissionResponse,\n  MediaLibraryPermissionResponse,\n  PermissionStatus,\n  PermissionExpiration,\n  PermissionHookOptions,\n  PermissionResponse,\n  ImageInfo,\n  ImagePickerMultipleResult,\n  ImagePickerCancelledResult,\n  OpenFileBrowserOptions,\n  ExpandImagePickerResult,\n  UIImagePickerControllerQualityType,\n  UIImagePickerPresentationStyle,\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}