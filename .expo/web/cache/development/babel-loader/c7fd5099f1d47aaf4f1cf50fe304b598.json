{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport PropTypes from 'prop-types';\nimport React, { useRef } from 'react';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport { MIN_COMPOSER_HEIGHT, DEFAULT_PLACEHOLDER } from \"./Constant\";\nimport Color from \"./Color\";\nimport { StylePropType } from \"./utils\";\nimport { useCallbackOne } from 'use-memo-one';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar styles = StyleSheet.create({\n  textInput: _objectSpread(_objectSpread({\n    flex: 1,\n    marginLeft: 10,\n    fontSize: 16,\n    lineHeight: 16\n  }, Platform.select({\n    web: {\n      paddingTop: 6,\n      paddingLeft: 4\n    }\n  })), {}, {\n    marginTop: Platform.select({\n      ios: 6,\n      android: 0,\n      web: 6\n    }),\n    marginBottom: Platform.select({\n      ios: 5,\n      android: 3,\n      web: 4\n    })\n  })\n});\nexport function Composer(_ref) {\n  var _ref$composerHeight = _ref.composerHeight,\n      composerHeight = _ref$composerHeight === void 0 ? MIN_COMPOSER_HEIGHT : _ref$composerHeight,\n      _ref$disableComposer = _ref.disableComposer,\n      disableComposer = _ref$disableComposer === void 0 ? false : _ref$disableComposer,\n      _ref$keyboardAppearan = _ref.keyboardAppearance,\n      keyboardAppearance = _ref$keyboardAppearan === void 0 ? 'default' : _ref$keyboardAppearan,\n      _ref$multiline = _ref.multiline,\n      multiline = _ref$multiline === void 0 ? true : _ref$multiline,\n      _ref$onInputSizeChang = _ref.onInputSizeChanged,\n      onInputSizeChanged = _ref$onInputSizeChang === void 0 ? function () {} : _ref$onInputSizeChang,\n      _ref$onTextChanged = _ref.onTextChanged,\n      onTextChanged = _ref$onTextChanged === void 0 ? function () {} : _ref$onTextChanged,\n      _ref$placeholder = _ref.placeholder,\n      placeholder = _ref$placeholder === void 0 ? DEFAULT_PLACEHOLDER : _ref$placeholder,\n      _ref$placeholderTextC = _ref.placeholderTextColor,\n      placeholderTextColor = _ref$placeholderTextC === void 0 ? Color.defaultColor : _ref$placeholderTextC,\n      _ref$text = _ref.text,\n      text = _ref$text === void 0 ? '' : _ref$text,\n      _ref$textInputAutoFoc = _ref.textInputAutoFocus,\n      textInputAutoFocus = _ref$textInputAutoFoc === void 0 ? false : _ref$textInputAutoFoc,\n      _ref$textInputProps = _ref.textInputProps,\n      textInputProps = _ref$textInputProps === void 0 ? {} : _ref$textInputProps,\n      textInputStyle = _ref.textInputStyle;\n  var layoutRef = useRef();\n  var handleOnLayout = useCallbackOne(function (_ref2) {\n    var layout = _ref2.nativeEvent.layout;\n\n    if (!layout) {\n      return;\n    }\n\n    if (!layoutRef || layoutRef.current && (layoutRef.current.width !== layoutRef.current.width || layoutRef.current.height !== layoutRef.current.height)) {\n      layoutRef.current = layout;\n      onInputSizeChanged(layout);\n    }\n  }, [onInputSizeChanged]);\n  return _jsx(TextInput, _objectSpread({\n    testID: placeholder,\n    accessible: true,\n    accessibilityLabel: placeholder,\n    placeholder: placeholder,\n    placeholderTextColor: placeholderTextColor,\n    multiline: multiline,\n    editable: !disableComposer,\n    onLayout: handleOnLayout,\n    onChangeText: onTextChanged,\n    style: [styles.textInput, textInputStyle, _objectSpread({\n      height: composerHeight\n    }, Platform.select({\n      web: {\n        outlineWidth: 0,\n        outlineColor: 'transparent',\n        outlineOffset: 0\n      }\n    }))],\n    autoFocus: textInputAutoFocus,\n    value: text,\n    enablesReturnKeyAutomatically: true,\n    underlineColorAndroid: \"transparent\",\n    keyboardAppearance: keyboardAppearance\n  }, textInputProps));\n}\nComposer.propTypes = {\n  composerHeight: PropTypes.number,\n  text: PropTypes.string,\n  placeholder: PropTypes.string,\n  placeholderTextColor: PropTypes.string,\n  textInputProps: PropTypes.object,\n  onTextChanged: PropTypes.func,\n  onInputSizeChanged: PropTypes.func,\n  multiline: PropTypes.bool,\n  disableComposer: PropTypes.bool,\n  textInputStyle: StylePropType,\n  textInputAutoFocus: PropTypes.bool,\n  keyboardAppearance: PropTypes.string\n};","map":{"version":3,"sources":["../src/Composer.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import PropTypes from 'prop-types';\nimport React, { useRef } from 'react';\nimport { Platform, StyleSheet, TextInput, } from 'react-native';\nimport { MIN_COMPOSER_HEIGHT, DEFAULT_PLACEHOLDER } from './Constant';\nimport Color from './Color';\nimport { StylePropType } from './utils';\nimport { useCallbackOne } from 'use-memo-one';\nconst styles = StyleSheet.create({\n    textInput: {\n        flex: 1,\n        marginLeft: 10,\n        fontSize: 16,\n        lineHeight: 16,\n        ...Platform.select({\n            web: {\n                paddingTop: 6,\n                paddingLeft: 4,\n            },\n        }),\n        marginTop: Platform.select({\n            ios: 6,\n            android: 0,\n            web: 6,\n        }),\n        marginBottom: Platform.select({\n            ios: 5,\n            android: 3,\n            web: 4,\n        }),\n    },\n});\nexport function Composer({ composerHeight = MIN_COMPOSER_HEIGHT, disableComposer = false, keyboardAppearance = 'default', multiline = true, onInputSizeChanged = () => { }, onTextChanged = () => { }, placeholder = DEFAULT_PLACEHOLDER, placeholderTextColor = Color.defaultColor, text = '', textInputAutoFocus = false, textInputProps = {}, textInputStyle, }) {\n    const layoutRef = useRef();\n    const handleOnLayout = useCallbackOne(({ nativeEvent: { layout } }) => {\n        // Support earlier versions of React Native on Android.\n        if (!layout) {\n            return;\n        }\n        if (!layoutRef ||\n            (layoutRef.current &&\n                (layoutRef.current.width !== layoutRef.current.width ||\n                    layoutRef.current.height !== layoutRef.current.height))) {\n            layoutRef.current = layout;\n            onInputSizeChanged(layout);\n        }\n    }, [onInputSizeChanged]);\n    return (<TextInput testID={placeholder} accessible accessibilityLabel={placeholder} placeholder={placeholder} placeholderTextColor={placeholderTextColor} multiline={multiline} editable={!disableComposer} onLayout={handleOnLayout} onChangeText={onTextChanged} style={[\n            styles.textInput,\n            textInputStyle,\n            {\n                height: composerHeight,\n                ...Platform.select({\n                    web: {\n                        outlineWidth: 0,\n                        outlineColor: 'transparent',\n                        outlineOffset: 0,\n                    },\n                }),\n            },\n        ]} autoFocus={textInputAutoFocus} value={text} enablesReturnKeyAutomatically underlineColorAndroid='transparent' keyboardAppearance={keyboardAppearance} {...textInputProps}/>);\n}\nComposer.propTypes = {\n    composerHeight: PropTypes.number,\n    text: PropTypes.string,\n    placeholder: PropTypes.string,\n    placeholderTextColor: PropTypes.string,\n    textInputProps: PropTypes.object,\n    onTextChanged: PropTypes.func,\n    onInputSizeChanged: PropTypes.func,\n    multiline: PropTypes.bool,\n    disableComposer: PropTypes.bool,\n    textInputStyle: StylePropType,\n    textInputAutoFocus: PropTypes.bool,\n    keyboardAppearance: PropTypes.string,\n};\n//# sourceMappingURL=Composer.js.map"]},"metadata":{},"sourceType":"module"}