{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport ToastAndroid from \"react-native-web/dist/exports/ToastAndroid\";\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport KeyboardAvoidingView from \"react-native-web/dist/exports/KeyboardAvoidingView\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport { useState } from 'react';\nimport AuthTextInput from \"../components/auth/AuthTextInput\";\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { createClient } from '@supabase/supabase-js';\nimport AuthPressable from \"../components/auth/AuthPressable\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar supabaseUrl = \"https://aqeopdkkfhradtlezpil.supabase.co\";\nvar supabaseAnonKey = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImFxZW9wZGtrZmhyYWR0bGV6cGlsIiwicm9sZSI6ImFub24iLCJpYXQiOjE2NTM0NTIxMTEsImV4cCI6MTk2OTAyODExMX0.MZZovcPnuGFnM2wDyabFZAuL8ei9vZqlfxql4I849wA\";\nvar supabase = createClient(supabaseUrl, supabaseAnonKey);\n\nvar AuthScreen = function AuthScreen() {\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      email = _useState2[0],\n      setEmail = _useState2[1];\n\n  var _useState3 = useState(''),\n      _useState4 = _slicedToArray(_useState3, 2),\n      password = _useState4[0],\n      setPassword = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      isLogin = _useState6[0],\n      setIsLogin = _useState6[1];\n\n  function signInWithEmail() {\n    var _await$supabase$auth$, user, error;\n\n    return _regeneratorRuntime.async(function signInWithEmail$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            setIsLogin(true);\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(supabase.auth.signIn({\n              email: email,\n              password: password\n            }));\n\n          case 3:\n            _await$supabase$auth$ = _context.sent;\n            user = _await$supabase$auth$.user;\n            error = _await$supabase$auth$.error;\n            if (error) Alert.alert(\"Invalid email or password\");\n            setIsLogin(false);\n\n          case 8:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  function signUpWithEmail() {\n    var _await$supabase$auth$2, user, error;\n\n    return _regeneratorRuntime.async(function signUpWithEmail$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            setIsLogin(true);\n            _context2.next = 3;\n            return _regeneratorRuntime.awrap(supabase.auth.signUp({\n              email: email,\n              password: password\n            }));\n\n          case 3:\n            _await$supabase$auth$2 = _context2.sent;\n            user = _await$supabase$auth$2.user;\n            error = _await$supabase$auth$2.error;\n            if (error) Alert.alert(error.message);\n            setIsLogin(false);\n\n          case 8:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  return _jsx(KeyboardAvoidingView, {\n    behavior: Platform.OS === 'ios' ? 'padding' : 'height',\n    children: _jsxs(View, {\n      style: styles.container,\n      children: [_jsx(Image, {\n        source: require(\"../assets/test.png\"),\n        style: {\n          width: 200,\n          height: 220,\n          bottom: 15\n        }\n      }), _jsx(Text, {\n        style: [styles.title, styles.boldText],\n        children: \"NUSinteract\"\n      }), _jsx(AuthTextInput, {\n        value: email,\n        placeholder: \"Your Email\",\n        textHandler: setEmail,\n        KeyboardType: \"email-address\"\n      }), _jsx(AuthTextInput, {\n        value: password,\n        placeholder: \"password\",\n        textHandler: setPassword,\n        secureTextEntry: true\n      }), _jsx(AuthPressable, {\n        onPressHandler: isLogin ? signInWithEmail : signUpWithEmail,\n        title: 'PROCEED'\n      }), _jsx(AuthPressable, {\n        onPressHandler: isLogin ? signInWithEmail : signUpWithEmail,\n        title: \"\" + (isLogin ? 'LOG IN' : 'SIGN UP NOW')\n      })]\n    })\n  });\n};\n\nexport default AuthScreen;\nvar styles = StyleSheet.create({\n  container: {\n    backgroundColor: '#7FFFD4',\n    height: '100%',\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  title: {\n    fontSize: 35,\n    fontFamily: \"AvenirNext-Italic\",\n    textAlign: 'center',\n    marginBottom: 20\n  },\n  boldText: {\n    fontWeight: '500'\n  }\n});","map":{"version":3,"names":["useState","AuthTextInput","AsyncStorage","createClient","AuthPressable","supabaseUrl","supabaseAnonKey","supabase","AuthScreen","email","setEmail","password","setPassword","isLogin","setIsLogin","signInWithEmail","auth","signIn","user","error","Alert","alert","signUpWithEmail","signUp","message","Platform","OS","styles","container","require","width","height","bottom","title","boldText","StyleSheet","create","backgroundColor","justifyContent","alignItems","fontSize","fontFamily","textAlign","marginBottom","fontWeight"],"sources":["/Users/hanyang/Orbital2022/screens/AuthScreen.js"],"sourcesContent":["import { \n    StyleSheet,\n    Text,\n    View,\n    ToastAndroid, \n    Keyboard,\n    KeyboardAvoidingView,\n    Platform, \n    Alert,\n    Image\n} from 'react-native';\n\nimport { useState } from 'react';\n\nimport AuthTextInput from '../components/auth/AuthTextInput';\n\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { createClient } from '@supabase/supabase-js'\nimport AuthPressable from '../components/auth/AuthPressable';\n\n\nconst supabaseUrl = \"https://aqeopdkkfhradtlezpil.supabase.co\"\nconst supabaseAnonKey = \n\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImFxZW9wZGtrZmhyYWR0bGV6cGlsIiwicm9sZSI6ImFub24iLCJpYXQiOjE2NTM0NTIxMTEsImV4cCI6MTk2OTAyODExMX0.MZZovcPnuGFnM2wDyabFZAuL8ei9vZqlfxql4I849wA\"\n\nconst supabase = createClient(supabaseUrl, supabaseAnonKey);\n\n\nconst AuthScreen = () => {\n\n    const [email, setEmail] = useState('');\n    const [password, setPassword] = useState('');\n    const [isLogin, setIsLogin] = useState(false);\n\n\n    // check if possible log in\n    async function signInWithEmail() {\n        setIsLogin(true)\n        const { user, error } = await supabase.auth.signIn({\n            email: email,\n            password: password,\n        })\n\n        if (error) Alert.alert(\"Invalid email or password\")\n        setIsLogin(false)\n    }\n\n    // check if sign up passed through\n    async function signUpWithEmail() {\n        setIsLogin(true)\n        const { user, error } = await supabase.auth.signUp({ \n            email: email,\n            password: password,\n        })\n\n        if (error) Alert.alert(error.message)\n        setIsLogin(false)\n    }\n\n    \n    return (\n        <KeyboardAvoidingView\n            behavior={Platform.OS === 'ios' ? 'padding' : 'height'}\n        >\n\n            <View style={styles.container}>\n             \n                <Image\n                    source = {require('../assets/test.png')}\n                    style = {{width: 200, height: 220, bottom: 15}}\n                />\n\n                <Text style={[styles.title, styles.boldText]}>\n                    NUSinteract\n                </Text>\n          \n                <AuthTextInput\n                    value={email}\n                    placeholder='Your Email'\n                    textHandler={setEmail}\n                    KeyboardType='email-address'\n                />\n\n                <AuthTextInput\n                    value={password}\n                    placeholder='password'\n                    textHandler={setPassword}\n                    secureTextEntry\n                />\n                <AuthPressable\n                    onPressHandler={isLogin ? signInWithEmail : signUpWithEmail}    \n                    title={'PROCEED'}\n                />\n                <AuthPressable\n                    onPressHandler={isLogin ? signInWithEmail : signUpWithEmail}    \n                    title={`${isLogin ? 'LOG IN' : 'SIGN UP NOW'}`}\n                />\n            </View>\n        </KeyboardAvoidingView>\n    )\n/*\n    // messages\n    const signUpToast = () => {\n        ToastAndroid.show(\n            'Sign Up Successfully completed!', \n            ToastAndroid.SHORT\n        );\n    };\n\n    const missingFieldsToast = () => {\n        ToastAndroid.show(\n            'Missing Fields, please try again!',\n            ToastAndroid.SHORT\n        );\n    };\n    */\n}\n\nexport default AuthScreen; \n\nconst styles = StyleSheet.create({\n    container: {\n        backgroundColor: '#7FFFD4',\n        height: '100%',\n        justifyContent: 'center',\n        alignItems: 'center',\n    },\n    \n    title: {\n        fontSize: 35, \n        fontFamily: \"AvenirNext-Italic\",\n        textAlign: 'center',\n        marginBottom: 20\n    },\n\n    boldText: {\n        fontWeight: '500'\n    }\n});"],"mappings":"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"},"metadata":{},"sourceType":"module"}