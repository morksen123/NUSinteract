{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport PropTypes from 'prop-types';\nimport React, { useState, useMemo } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport { useCallbackOne } from 'use-memo-one';\nimport Color from \"./Color\";\nimport { StylePropType } from \"./utils\";\nimport { warning } from \"./logging\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar styles = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    maxWidth: 300\n  },\n  quickReply: {\n    justifyContent: 'center',\n    alignItems: 'center',\n    borderWidth: 1,\n    maxWidth: 200,\n    paddingVertical: 7,\n    paddingHorizontal: 12,\n    minHeight: 50,\n    borderRadius: 13,\n    margin: 3\n  },\n  quickReplyText: {\n    overflow: 'visible'\n  },\n  sendLink: {\n    borderWidth: 0\n  },\n  sendLinkText: {\n    color: Color.defaultBlue,\n    fontWeight: '600',\n    fontSize: 17\n  }\n});\n\nvar sameReply = function sameReply(currentReply) {\n  return function (reply) {\n    return currentReply.value === reply.value;\n  };\n};\n\nvar diffReply = function diffReply(currentReply) {\n  return function (reply) {\n    return currentReply.value !== reply.value;\n  };\n};\n\nexport function QuickReplies(_ref) {\n  var currentMessage = _ref.currentMessage,\n      nextMessage = _ref.nextMessage,\n      _ref$color = _ref.color,\n      color = _ref$color === void 0 ? Color.peterRiver : _ref$color,\n      quickReplyStyle = _ref.quickReplyStyle,\n      quickReplyTextStyle = _ref.quickReplyTextStyle,\n      onQuickReply = _ref.onQuickReply,\n      _ref$sendText = _ref.sendText,\n      sendText = _ref$sendText === void 0 ? 'Send' : _ref$sendText,\n      renderQuickReplySend = _ref.renderQuickReplySend;\n  var type = currentMessage.quickReplies.type;\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      replies = _useState2[0],\n      setReplies = _useState2[1];\n\n  var shouldComponentDisplay = useMemo(function () {\n    var hasReplies = !!currentMessage && !!currentMessage.quickReplies;\n    var hasNext = !!nextMessage && !!nextMessage._id;\n    var keepIt = currentMessage.quickReplies.keepIt;\n\n    if (hasReplies && !hasNext) {\n      return true;\n    }\n\n    if (hasReplies && hasNext && keepIt) {\n      return true;\n    }\n\n    return false;\n  }, [currentMessage, nextMessage]);\n  var handlePress = useCallbackOne(function (reply) {\n    return function () {\n      if (currentMessage) {\n        var _type = currentMessage.quickReplies.type;\n\n        switch (_type) {\n          case 'radio':\n            {\n              handleSend([reply])();\n              return;\n            }\n\n          case 'checkbox':\n            {\n              if (replies.find(sameReply(reply))) {\n                setReplies(replies.filter(diffReply(reply)));\n              } else {\n                setReplies([].concat(_toConsumableArray(replies), [reply]));\n              }\n\n              return;\n            }\n\n          default:\n            {\n              warning(\"onQuickReply unknown type: \" + _type);\n              return;\n            }\n        }\n      }\n    };\n  }, [replies, currentMessage]);\n\n  var handleSend = function handleSend(repliesData) {\n    return function () {\n      onQuickReply === null || onQuickReply === void 0 ? void 0 : onQuickReply(repliesData.map(function (reply) {\n        return _objectSpread(_objectSpread({}, reply), {}, {\n          messageId: currentMessage._id\n        });\n      }));\n    };\n  };\n\n  if (!shouldComponentDisplay) {\n    return null;\n  }\n\n  return _jsxs(View, {\n    style: styles.container,\n    children: [currentMessage.quickReplies.values.map(function (reply, index) {\n      var selected = type === 'checkbox' && replies.find(sameReply(reply));\n      return _jsx(TouchableOpacity, {\n        onPress: handlePress(reply),\n        style: [styles.quickReply, quickReplyStyle, {\n          borderColor: color\n        }, selected && {\n          backgroundColor: color\n        }],\n        children: _jsx(Text, {\n          numberOfLines: 10,\n          ellipsizeMode: 'tail',\n          style: [styles.quickReplyText, {\n            color: selected ? Color.white : color\n          }, quickReplyTextStyle],\n          children: reply.title\n        })\n      }, reply.value + \"-\" + index);\n    }), replies.length > 0 && _jsx(TouchableOpacity, {\n      style: [styles.quickReply, styles.sendLink],\n      onPress: handleSend(replies),\n      children: (renderQuickReplySend === null || renderQuickReplySend === void 0 ? void 0 : renderQuickReplySend()) || _jsx(Text, {\n        style: styles.sendLinkText,\n        children: sendText\n      })\n    })]\n  });\n}\nQuickReplies.propTypes = {\n  currentMessage: PropTypes.object.isRequired,\n  onQuickReply: PropTypes.func,\n  color: PropTypes.string,\n  sendText: PropTypes.string,\n  renderQuickReplySend: PropTypes.func,\n  quickReplyStyle: StylePropType\n};","map":{"version":3,"sources":["../src/QuickReplies.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import PropTypes from 'prop-types';\nimport React, { useState, useMemo } from 'react';\nimport { Text, StyleSheet, View, TouchableOpacity, } from 'react-native';\nimport { useCallbackOne } from 'use-memo-one';\nimport Color from './Color';\nimport { StylePropType } from './utils';\nimport { warning } from './logging';\nconst styles = StyleSheet.create({\n    container: {\n        flexDirection: 'row',\n        flexWrap: 'wrap',\n        maxWidth: 300,\n    },\n    quickReply: {\n        justifyContent: 'center',\n        alignItems: 'center',\n        borderWidth: 1,\n        maxWidth: 200,\n        paddingVertical: 7,\n        paddingHorizontal: 12,\n        minHeight: 50,\n        borderRadius: 13,\n        margin: 3,\n    },\n    quickReplyText: {\n        overflow: 'visible',\n    },\n    sendLink: {\n        borderWidth: 0,\n    },\n    sendLinkText: {\n        color: Color.defaultBlue,\n        fontWeight: '600',\n        fontSize: 17,\n    },\n});\nconst sameReply = (currentReply) => (reply) => currentReply.value === reply.value;\nconst diffReply = (currentReply) => (reply) => currentReply.value !== reply.value;\nexport function QuickReplies({ currentMessage, nextMessage, color = Color.peterRiver, quickReplyStyle, quickReplyTextStyle, onQuickReply, sendText = 'Send', renderQuickReplySend, }) {\n    const { type } = currentMessage.quickReplies;\n    const [replies, setReplies] = useState([]);\n    const shouldComponentDisplay = useMemo(() => {\n        const hasReplies = !!currentMessage && !!currentMessage.quickReplies;\n        const hasNext = !!nextMessage && !!nextMessage._id;\n        const keepIt = currentMessage.quickReplies.keepIt;\n        if (hasReplies && !hasNext) {\n            return true;\n        }\n        if (hasReplies && hasNext && keepIt) {\n            return true;\n        }\n        return false;\n    }, [currentMessage, nextMessage]);\n    const handlePress = useCallbackOne((reply) => () => {\n        if (currentMessage) {\n            const { type } = currentMessage.quickReplies;\n            switch (type) {\n                case 'radio': {\n                    handleSend([reply])();\n                    return;\n                }\n                case 'checkbox': {\n                    if (replies.find(sameReply(reply))) {\n                        setReplies(replies.filter(diffReply(reply)));\n                    }\n                    else {\n                        setReplies([...replies, reply]);\n                    }\n                    return;\n                }\n                default: {\n                    warning(`onQuickReply unknown type: ${type}`);\n                    return;\n                }\n            }\n        }\n    }, [replies, currentMessage]);\n    const handleSend = (repliesData) => () => {\n        onQuickReply === null || onQuickReply === void 0 ? void 0 : onQuickReply(repliesData.map((reply) => ({\n            ...reply,\n            messageId: currentMessage._id,\n        })));\n    };\n    if (!shouldComponentDisplay) {\n        return null;\n    }\n    return (<View style={styles.container}>\n      {currentMessage.quickReplies.values.map((reply, index) => {\n            const selected = type === 'checkbox' && replies.find(sameReply(reply));\n            return (<TouchableOpacity onPress={handlePress(reply)} style={[\n                    styles.quickReply,\n                    quickReplyStyle,\n                    { borderColor: color },\n                    selected && { backgroundColor: color },\n                ]} key={`${reply.value}-${index}`}>\n              <Text numberOfLines={10} ellipsizeMode={'tail'} style={[\n                    styles.quickReplyText,\n                    { color: selected ? Color.white : color },\n                    quickReplyTextStyle,\n                ]}>\n                {reply.title}\n              </Text>\n            </TouchableOpacity>);\n        })}\n      {replies.length > 0 && (<TouchableOpacity style={[styles.quickReply, styles.sendLink]} onPress={handleSend(replies)}>\n          {(renderQuickReplySend === null || renderQuickReplySend === void 0 ? void 0 : renderQuickReplySend()) || (<Text style={styles.sendLinkText}>{sendText}</Text>)}\n        </TouchableOpacity>)}\n    </View>);\n}\nQuickReplies.propTypes = {\n    currentMessage: PropTypes.object.isRequired,\n    onQuickReply: PropTypes.func,\n    color: PropTypes.string,\n    sendText: PropTypes.string,\n    renderQuickReplySend: PropTypes.func,\n    quickReplyStyle: StylePropType,\n};\n//# sourceMappingURL=QuickReplies.js.map"]},"metadata":{},"sourceType":"module"}