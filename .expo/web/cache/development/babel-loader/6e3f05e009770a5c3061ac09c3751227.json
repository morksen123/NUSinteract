{"ast":null,"code":"import * as React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { TypingAnimation } from 'react-native-typing-animation';\nimport { useUpdateLayoutEffect } from \"./hooks/useUpdateLayoutEffect\";\nimport Color from \"./Color\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nvar TypingIndicator = function TypingIndicator(_ref) {\n  var isTyping = _ref.isTyping;\n\n  var _React$useMemo = React.useMemo(function () {\n    return {\n      yCoords: new Animated.Value(200),\n      heightScale: new Animated.Value(0),\n      marginScale: new Animated.Value(0)\n    };\n  }, []),\n      yCoords = _React$useMemo.yCoords,\n      heightScale = _React$useMemo.heightScale,\n      marginScale = _React$useMemo.marginScale;\n\n  useUpdateLayoutEffect(function () {\n    if (isTyping) {\n      slideIn();\n    } else {\n      slideOut();\n    }\n  }, [isTyping]);\n\n  var slideIn = function slideIn() {\n    Animated.parallel([Animated.spring(yCoords, {\n      toValue: 0,\n      useNativeDriver: false\n    }), Animated.timing(heightScale, {\n      toValue: 35,\n      duration: 250,\n      useNativeDriver: false\n    }), Animated.timing(marginScale, {\n      toValue: 8,\n      duration: 250,\n      useNativeDriver: false\n    })]).start();\n  };\n\n  var slideOut = function slideOut() {\n    Animated.parallel([Animated.spring(yCoords, {\n      toValue: 200,\n      useNativeDriver: false\n    }), Animated.timing(heightScale, {\n      toValue: 0,\n      duration: 250,\n      useNativeDriver: false\n    }), Animated.timing(marginScale, {\n      toValue: 0,\n      duration: 250,\n      useNativeDriver: false\n    })]).start();\n  };\n\n  return _jsx(Animated.View, {\n    style: [styles.container, {\n      transform: [{\n        translateY: yCoords\n      }],\n      height: heightScale,\n      marginBottom: marginScale\n    }],\n    children: isTyping ? _jsx(TypingAnimation, {\n      style: {\n        marginLeft: 6,\n        marginTop: 7.2\n      },\n      dotRadius: 4,\n      dotMargin: 5.5,\n      dotColor: 'rgba(0, 0, 0, 0.38)'\n    }) : null\n  });\n};\n\nvar styles = StyleSheet.create({\n  container: {\n    marginLeft: 8,\n    width: 45,\n    borderRadius: 15,\n    backgroundColor: Color.leftBubbleBackground\n  }\n});\nexport default TypingIndicator;","map":{"version":3,"sources":["../src/TypingIndicator.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAZ,MAAuB,OAAvB;;;AAEA,SAAS,eAAT,QAAgC,+BAAhC;AACA,SAAS,qBAAT;AACA,OAAO,KAAP;;;AAMA,IAAM,eAAe,GAAG,SAAlB,eAAkB,OAAwB;EAAA,IAArB,QAAqB,QAArB,QAAqB;;EAC9C,qBAA8C,KAAK,CAAC,OAAN,CAC5C;IAAA,OAAO;MACL,OAAO,EAAE,IAAI,QAAQ,CAAC,KAAb,CAAmB,GAAnB,CADJ;MAEL,WAAW,EAAE,IAAI,QAAQ,CAAC,KAAb,CAAmB,CAAnB,CAFR;MAGL,WAAW,EAAE,IAAI,QAAQ,CAAC,KAAb,CAAmB,CAAnB;IAHR,CAAP;EAAA,CAD4C,EAM5C,EAN4C,CAA9C;EAAA,IAAQ,OAAR,kBAAQ,OAAR;EAAA,IAAiB,WAAjB,kBAAiB,WAAjB;EAAA,IAA8B,WAA9B,kBAA8B,WAA9B;;EAUA,qBAAqB,CAAC,YAAK;IACzB,IAAI,QAAJ,EAAc;MACZ,OAAO;IACR,CAFD,MAEO;MACL,QAAQ;IACT;EACF,CANoB,EAMlB,CAAC,QAAD,CANkB,CAArB;;EASA,IAAM,OAAO,GAAG,SAAV,OAAU,GAAK;IACnB,QAAQ,CAAC,QAAT,CAAkB,CAChB,QAAQ,CAAC,MAAT,CAAgB,OAAhB,EAAyB;MACvB,OAAO,EAAE,CADc;MAEvB,eAAe,EAAE;IAFM,CAAzB,CADgB,EAKhB,QAAQ,CAAC,MAAT,CAAgB,WAAhB,EAA6B;MAC3B,OAAO,EAAE,EADkB;MAE3B,QAAQ,EAAE,GAFiB;MAG3B,eAAe,EAAE;IAHU,CAA7B,CALgB,EAUhB,QAAQ,CAAC,MAAT,CAAgB,WAAhB,EAA6B;MAC3B,OAAO,EAAE,CADkB;MAE3B,QAAQ,EAAE,GAFiB;MAG3B,eAAe,EAAE;IAHU,CAA7B,CAVgB,CAAlB,EAeG,KAfH;EAgBD,CAjBD;;EAoBA,IAAM,QAAQ,GAAG,SAAX,QAAW,GAAK;IACpB,QAAQ,CAAC,QAAT,CAAkB,CAChB,QAAQ,CAAC,MAAT,CAAgB,OAAhB,EAAyB;MACvB,OAAO,EAAE,GADc;MAEvB,eAAe,EAAE;IAFM,CAAzB,CADgB,EAKhB,QAAQ,CAAC,MAAT,CAAgB,WAAhB,EAA6B;MAC3B,OAAO,EAAE,CADkB;MAE3B,QAAQ,EAAE,GAFiB;MAG3B,eAAe,EAAE;IAHU,CAA7B,CALgB,EAUhB,QAAQ,CAAC,MAAT,CAAgB,WAAhB,EAA6B;MAC3B,OAAO,EAAE,CADkB;MAE3B,QAAQ,EAAE,GAFiB;MAG3B,eAAe,EAAE;IAHU,CAA7B,CAVgB,CAAlB,EAeG,KAfH;EAgBD,CAjBD;;EAkBA,OACE,KAAC,QAAD,CAAU,IAAV;IACE,KAAK,EAAE,CACL,MAAM,CAAC,SADF,EAEL;MACE,SAAS,EAAE,CACT;QACE,UAAU,EAAE;MADd,CADS,CADb;MAME,MAAM,EAAE,WANV;MAOE,YAAY,EAAE;IAPhB,CAFK,CADT;IAAA,UAcG,QAAQ,GACP,KAAC,eAAD;MACE,KAAK,EAAE;QAAE,UAAU,EAAE,CAAd;QAAiB,SAAS,EAAE;MAA5B,CADT;MAEE,SAAS,EAAE,CAFb;MAGE,SAAS,EAAE,GAHb;MAIE,QAAQ,EAAE;IAJZ,EADO,GAOL;EArBN,EADF;AAyBD,CAnFD;;AAqFA,IAAM,MAAM,GAAG,UAAU,CAAC,MAAX,CAAkB;EAC/B,SAAS,EAAE;IACT,UAAU,EAAE,CADH;IAET,KAAK,EAAE,EAFE;IAGT,YAAY,EAAE,EAHL;IAIT,eAAe,EAAE,KAAK,CAAC;EAJd;AADoB,CAAlB,CAAf;AASA,eAAe,eAAf","sourceRoot":"","sourcesContent":["import * as React from 'react';\nimport { Animated, StyleSheet } from 'react-native';\nimport { TypingAnimation } from 'react-native-typing-animation';\nimport { useUpdateLayoutEffect } from './hooks/useUpdateLayoutEffect';\nimport Color from './Color';\nconst TypingIndicator = ({ isTyping }) => {\n    const { yCoords, heightScale, marginScale } = React.useMemo(() => ({\n        yCoords: new Animated.Value(200),\n        heightScale: new Animated.Value(0),\n        marginScale: new Animated.Value(0),\n    }), []);\n    // on isTyping fire side effect\n    useUpdateLayoutEffect(() => {\n        if (isTyping) {\n            slideIn();\n        }\n        else {\n            slideOut();\n        }\n    }, [isTyping]);\n    // side effect\n    const slideIn = () => {\n        Animated.parallel([\n            Animated.spring(yCoords, {\n                toValue: 0,\n                useNativeDriver: false,\n            }),\n            Animated.timing(heightScale, {\n                toValue: 35,\n                duration: 250,\n                useNativeDriver: false,\n            }),\n            Animated.timing(marginScale, {\n                toValue: 8,\n                duration: 250,\n                useNativeDriver: false,\n            }),\n        ]).start();\n    };\n    // side effect\n    const slideOut = () => {\n        Animated.parallel([\n            Animated.spring(yCoords, {\n                toValue: 200,\n                useNativeDriver: false,\n            }),\n            Animated.timing(heightScale, {\n                toValue: 0,\n                duration: 250,\n                useNativeDriver: false,\n            }),\n            Animated.timing(marginScale, {\n                toValue: 0,\n                duration: 250,\n                useNativeDriver: false,\n            }),\n        ]).start();\n    };\n    return (<Animated.View style={[\n            styles.container,\n            {\n                transform: [\n                    {\n                        translateY: yCoords,\n                    },\n                ],\n                height: heightScale,\n                marginBottom: marginScale,\n            },\n        ]}>\n      {isTyping ? (<TypingAnimation style={{ marginLeft: 6, marginTop: 7.2 }} dotRadius={4} dotMargin={5.5} dotColor={'rgba(0, 0, 0, 0.38)'}/>) : null}\n    </Animated.View>);\n};\nconst styles = StyleSheet.create({\n    container: {\n        marginLeft: 8,\n        width: 45,\n        borderRadius: 15,\n        backgroundColor: Color.leftBubbleBackground,\n    },\n});\nexport default TypingIndicator;\n//# sourceMappingURL=TypingIndicator.js.map"]},"metadata":{},"sourceType":"module"}