{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { useCallbackOne, useMemoOne } from 'use-memo-one';\nimport Color from \"./Color\";\nimport { StylePropType } from \"./utils\";\nimport { TEST_ID } from \"./Constant\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar styles = StyleSheet.create({\n  container: {\n    height: 44,\n    justifyContent: 'flex-end'\n  },\n  text: {\n    color: Color.defaultBlue,\n    fontWeight: '600',\n    fontSize: 17,\n    backgroundColor: Color.backgroundTransparent,\n    marginBottom: 12,\n    marginLeft: 10,\n    marginRight: 10\n  }\n});\nexport var Send = function Send(_ref) {\n  var _ref$text = _ref.text,\n      text = _ref$text === void 0 ? '' : _ref$text,\n      containerStyle = _ref.containerStyle,\n      children = _ref.children,\n      textStyle = _ref.textStyle,\n      _ref$label = _ref.label,\n      label = _ref$label === void 0 ? 'Send' : _ref$label,\n      _ref$alwaysShowSend = _ref.alwaysShowSend,\n      alwaysShowSend = _ref$alwaysShowSend === void 0 ? false : _ref$alwaysShowSend,\n      _ref$disabled = _ref.disabled,\n      disabled = _ref$disabled === void 0 ? false : _ref$disabled,\n      sendButtonProps = _ref.sendButtonProps,\n      _ref$onSend = _ref.onSend,\n      onSend = _ref$onSend === void 0 ? function () {} : _ref$onSend;\n  var handleOnPress = useCallbackOne(function () {\n    if (text && onSend) {\n      onSend({\n        text: text.trim()\n      }, true);\n    }\n  }, [text, onSend]);\n  var showSend = useMemoOne(function () {\n    return alwaysShowSend || text && text.trim().length > 0;\n  }, [alwaysShowSend, text]);\n\n  if (!showSend) {\n    return null;\n  }\n\n  return _jsx(TouchableOpacity, _objectSpread(_objectSpread({\n    testID: TEST_ID.SEND_TOUCHABLE,\n    accessible: true,\n    accessibilityLabel: \"send\",\n    style: [styles.container, containerStyle],\n    onPress: handleOnPress,\n    accessibilityRole: \"button\",\n    disabled: disabled\n  }, sendButtonProps), {}, {\n    children: _jsx(View, {\n      children: children || _jsx(Text, {\n        style: [styles.text, textStyle],\n        children: label\n      })\n    })\n  }));\n};\nSend.propTypes = {\n  text: PropTypes.string,\n  onSend: PropTypes.func,\n  label: PropTypes.string,\n  containerStyle: StylePropType,\n  textStyle: StylePropType,\n  children: PropTypes.element,\n  alwaysShowSend: PropTypes.bool,\n  disabled: PropTypes.bool,\n  sendButtonProps: PropTypes.object\n};","map":{"version":3,"sources":["../src/Send.tsx"],"names":[],"mappings":";;;;;;AAAA,OAAO,KAAK,KAAZ,MAAuB,OAAvB;AACA,OAAO,SAAP,MAAsB,YAAtB;;;;;AAWA,SAAS,cAAT,EAAyB,UAAzB,QAA2C,cAA3C;AAEA,OAAO,KAAP;AAEA,SAAS,aAAT;AACA,SAAS,OAAT;;AAEA,IAAM,MAAM,GAAG,UAAU,CAAC,MAAX,CAAkB;EAC/B,SAAS,EAAE;IACT,MAAM,EAAE,EADC;IAET,cAAc,EAAE;EAFP,CADoB;EAK/B,IAAI,EAAE;IACJ,KAAK,EAAE,KAAK,CAAC,WADT;IAEJ,UAAU,EAAE,KAFR;IAGJ,QAAQ,EAAE,EAHN;IAIJ,eAAe,EAAE,KAAK,CAAC,qBAJnB;IAKJ,YAAY,EAAE,EALV;IAMJ,UAAU,EAAE,EANR;IAOJ,WAAW,EAAE;EAPT;AALyB,CAAlB,CAAf;AA+BA,OAAO,IAAM,IAAI,GAAG,SAAP,IAAO,OAUM;EAAA,qBATxB,IASwB;EAAA,IATxB,IASwB,0BATjB,EASiB;EAAA,IARxB,cAQwB,QARxB,cAQwB;EAAA,IAPxB,QAOwB,QAPxB,QAOwB;EAAA,IANxB,SAMwB,QANxB,SAMwB;EAAA,sBALxB,KAKwB;EAAA,IALxB,KAKwB,2BALhB,MAKgB;EAAA,+BAJxB,cAIwB;EAAA,IAJxB,cAIwB,oCAJP,KAIO;EAAA,yBAHxB,QAGwB;EAAA,IAHxB,QAGwB,8BAHb,KAGa;EAAA,IAFxB,eAEwB,QAFxB,eAEwB;EAAA,uBADxB,MACwB;EAAA,IADxB,MACwB,4BADf,YAAK,CAAG,CACO;EACxB,IAAM,aAAa,GAAG,cAAc,CAAC,YAAK;IACxC,IAAI,IAAI,IAAI,MAAZ,EAAoB;MAClB,MAAM,CAAC;QAAE,IAAI,EAAE,IAAI,CAAC,IAAL;MAAR,CAAD,EAA6C,IAA7C,CAAN;IACD;EACF,CAJmC,EAIjC,CAAC,IAAD,EAAO,MAAP,CAJiC,CAApC;EAMA,IAAM,QAAQ,GAAG,UAAU,CACzB;IAAA,OAAM,cAAc,IAAK,IAAI,IAAI,IAAI,CAAC,IAAL,GAAY,MAAZ,GAAqB,CAAtD;EAAA,CADyB,EAEzB,CAAC,cAAD,EAAiB,IAAjB,CAFyB,CAA3B;;EAKA,IAAI,CAAC,QAAL,EAAe;IACb,OAAO,IAAP;EACD;;EAED,OACE,KAAC,gBAAD;IACE,MAAM,EAAE,OAAO,CAAC,cADlB;IAEE,UAAU,MAFZ;IAGE,kBAAkB,EAAC,MAHrB;IAIE,KAAK,EAAE,CAAC,MAAM,CAAC,SAAR,EAAmB,cAAnB,CAJT;IAKE,OAAO,EAAE,aALX;IAME,iBAAiB,EAAC,QANpB;IAOE,QAAQ,EAAE;EAPZ,GAQM,eARN;IAAA,UAUE,KAAC,IAAD;MAAA,UACG,QAAQ,IAAI,KAAC,IAAD;QAAM,KAAK,EAAE,CAAC,MAAM,CAAC,IAAR,EAAc,SAAd,CAAb;QAAA,UAAwC;MAAxC;IADf;EAVF,GADF;AAgBD,CA1CM;AA4CP,IAAI,CAAC,SAAL,GAAiB;EACf,IAAI,EAAE,SAAS,CAAC,MADD;EAEf,MAAM,EAAE,SAAS,CAAC,IAFH;EAGf,KAAK,EAAE,SAAS,CAAC,MAHF;EAIf,cAAc,EAAE,aAJD;EAKf,SAAS,EAAE,aALI;EAMf,QAAQ,EAAE,SAAS,CAAC,OANL;EAOf,cAAc,EAAE,SAAS,CAAC,IAPX;EAQf,QAAQ,EAAE,SAAS,CAAC,IARL;EASf,eAAe,EAAE,SAAS,CAAC;AATZ,CAAjB","sourceRoot":"","sourcesContent":["import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { StyleSheet, Text, TouchableOpacity, View, } from 'react-native';\nimport { useCallbackOne, useMemoOne } from 'use-memo-one';\nimport Color from './Color';\nimport { StylePropType } from './utils';\nimport { TEST_ID } from './Constant';\nconst styles = StyleSheet.create({\n    container: {\n        height: 44,\n        justifyContent: 'flex-end',\n    },\n    text: {\n        color: Color.defaultBlue,\n        fontWeight: '600',\n        fontSize: 17,\n        backgroundColor: Color.backgroundTransparent,\n        marginBottom: 12,\n        marginLeft: 10,\n        marginRight: 10,\n    },\n});\nexport const Send = ({ text = '', containerStyle, children, textStyle, label = 'Send', alwaysShowSend = false, disabled = false, sendButtonProps, onSend = () => { }, }) => {\n    const handleOnPress = useCallbackOne(() => {\n        if (text && onSend) {\n            onSend({ text: text.trim() }, true);\n        }\n    }, [text, onSend]);\n    const showSend = useMemoOne(() => alwaysShowSend || (text && text.trim().length > 0), [alwaysShowSend, text]);\n    if (!showSend) {\n        return null;\n    }\n    return (<TouchableOpacity testID={TEST_ID.SEND_TOUCHABLE} accessible accessibilityLabel='send' style={[styles.container, containerStyle]} onPress={handleOnPress} accessibilityRole='button' disabled={disabled} {...sendButtonProps}>\n      <View>\n        {children || <Text style={[styles.text, textStyle]}>{label}</Text>}\n      </View>\n    </TouchableOpacity>);\n};\nSend.propTypes = {\n    text: PropTypes.string,\n    onSend: PropTypes.func,\n    label: PropTypes.string,\n    containerStyle: StylePropType,\n    textStyle: StylePropType,\n    children: PropTypes.element,\n    alwaysShowSend: PropTypes.bool,\n    disabled: PropTypes.bool,\n    sendButtonProps: PropTypes.object,\n};\n//# sourceMappingURL=Send.js.map"]},"metadata":{},"sourceType":"module"}