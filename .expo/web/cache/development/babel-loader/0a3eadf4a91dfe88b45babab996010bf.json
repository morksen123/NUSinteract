{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _excluded = [\"onPress\"];\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport Image from \"react-native-web/dist/exports/Image\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Color from \"./Color\";\nimport { StylePropType } from \"./utils\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar carrot = Color.carrot,\n    emerald = Color.emerald,\n    peterRiver = Color.peterRiver,\n    wisteria = Color.wisteria,\n    alizarin = Color.alizarin,\n    turquoise = Color.turquoise,\n    midnightBlue = Color.midnightBlue;\nvar styles = StyleSheet.create({\n  avatarStyle: {\n    justifyContent: 'center',\n    alignItems: 'center',\n    width: 40,\n    height: 40,\n    borderRadius: 20\n  },\n  avatarTransparent: {\n    backgroundColor: Color.backgroundTransparent\n  },\n  textStyle: {\n    color: Color.white,\n    fontSize: 16,\n    backgroundColor: Color.backgroundTransparent,\n    fontWeight: '100'\n  }\n});\n\nvar GiftedAvatar = function (_React$Component) {\n  _inherits(GiftedAvatar, _React$Component);\n\n  var _super = _createSuper(GiftedAvatar);\n\n  function GiftedAvatar() {\n    var _this;\n\n    _classCallCheck(this, GiftedAvatar);\n\n    _this = _super.apply(this, arguments);\n    _this.avatarName = undefined;\n    _this.avatarColor = undefined;\n\n    _this.handleOnPress = function () {\n      var _this$props = _this.props,\n          onPress = _this$props.onPress,\n          other = _objectWithoutProperties(_this$props, _excluded);\n\n      if (_this.props.onPress) {\n        _this.props.onPress(other);\n      }\n    };\n\n    _this.handleOnLongPress = function () {};\n\n    return _this;\n  }\n\n  _createClass(GiftedAvatar, [{\n    key: \"setAvatarColor\",\n    value: function setAvatarColor() {\n      var userName = this.props.user && this.props.user.name || '';\n      var name = userName.toUpperCase().split(' ');\n\n      if (name.length === 1) {\n        this.avatarName = \"\" + name[0].charAt(0);\n      } else if (name.length > 1) {\n        this.avatarName = \"\" + name[0].charAt(0) + name[1].charAt(0);\n      } else {\n        this.avatarName = '';\n      }\n\n      var sumChars = 0;\n\n      for (var i = 0; i < userName.length; i += 1) {\n        sumChars += userName.charCodeAt(i);\n      }\n\n      var colors = [carrot, emerald, peterRiver, wisteria, alizarin, turquoise, midnightBlue];\n      this.avatarColor = colors[sumChars % colors.length];\n    }\n  }, {\n    key: \"renderAvatar\",\n    value: function renderAvatar() {\n      var user = this.props.user;\n\n      if (user) {\n        if (typeof user.avatar === 'function') {\n          return user.avatar([styles.avatarStyle, this.props.avatarStyle]);\n        } else if (typeof user.avatar === 'string') {\n          return _jsx(Image, {\n            source: {\n              uri: user.avatar\n            },\n            style: [styles.avatarStyle, this.props.avatarStyle]\n          });\n        } else if (typeof user.avatar === 'number') {\n          return _jsx(Image, {\n            source: user.avatar,\n            style: [styles.avatarStyle, this.props.avatarStyle]\n          });\n        }\n      }\n\n      return null;\n    }\n  }, {\n    key: \"renderInitials\",\n    value: function renderInitials() {\n      return _jsx(Text, {\n        style: [styles.textStyle, this.props.textStyle],\n        children: this.avatarName\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      if (!this.props.user || !this.props.user.name && !this.props.user.avatar) {\n        return _jsx(View, {\n          style: [styles.avatarStyle, styles.avatarTransparent, this.props.avatarStyle],\n          accessibilityRole: \"image\"\n        });\n      }\n\n      if (this.props.user.avatar) {\n        return _jsx(TouchableOpacity, {\n          disabled: !this.props.onPress,\n          onPress: this.props.onPress,\n          onLongPress: this.props.onLongPress,\n          accessibilityRole: \"image\",\n          children: this.renderAvatar()\n        });\n      }\n\n      this.setAvatarColor();\n      return _jsx(TouchableOpacity, {\n        disabled: !this.props.onPress,\n        onPress: this.props.onPress,\n        onLongPress: this.props.onLongPress,\n        style: [styles.avatarStyle, {\n          backgroundColor: this.avatarColor\n        }, this.props.avatarStyle],\n        accessibilityRole: \"image\",\n        children: this.renderInitials()\n      });\n    }\n  }]);\n\n  return GiftedAvatar;\n}(React.Component);\n\nexport { GiftedAvatar as default };\nGiftedAvatar.defaultProps = {\n  user: {\n    name: null,\n    avatar: null\n  },\n  onPress: undefined,\n  onLongPress: undefined,\n  avatarStyle: {},\n  textStyle: {}\n};\nGiftedAvatar.propTypes = {\n  user: PropTypes.object,\n  onPress: PropTypes.func,\n  onLongPress: PropTypes.func,\n  avatarStyle: StylePropType,\n  textStyle: StylePropType\n};","map":{"version":3,"sources":["../src/GiftedAvatar.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import PropTypes from 'prop-types';\nimport React from 'react';\nimport { Image, Text, TouchableOpacity, View, StyleSheet, } from 'react-native';\nimport Color from './Color';\nimport { StylePropType } from './utils';\nconst { carrot, emerald, peterRiver, wisteria, alizarin, turquoise, midnightBlue, } = Color;\nconst styles = StyleSheet.create({\n    avatarStyle: {\n        justifyContent: 'center',\n        alignItems: 'center',\n        width: 40,\n        height: 40,\n        borderRadius: 20,\n    },\n    avatarTransparent: {\n        backgroundColor: Color.backgroundTransparent,\n    },\n    textStyle: {\n        color: Color.white,\n        fontSize: 16,\n        backgroundColor: Color.backgroundTransparent,\n        fontWeight: '100',\n    },\n});\nexport default class GiftedAvatar extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.avatarName = undefined;\n        this.avatarColor = undefined;\n        this.handleOnPress = () => {\n            const { onPress, ...other } = this.props;\n            if (this.props.onPress) {\n                this.props.onPress(other);\n            }\n        };\n        this.handleOnLongPress = () => { };\n    }\n    setAvatarColor() {\n        const userName = (this.props.user && this.props.user.name) || '';\n        const name = userName.toUpperCase().split(' ');\n        if (name.length === 1) {\n            this.avatarName = `${name[0].charAt(0)}`;\n        }\n        else if (name.length > 1) {\n            this.avatarName = `${name[0].charAt(0)}${name[1].charAt(0)}`;\n        }\n        else {\n            this.avatarName = '';\n        }\n        let sumChars = 0;\n        for (let i = 0; i < userName.length; i += 1) {\n            sumChars += userName.charCodeAt(i);\n        }\n        // inspired by https://github.com/wbinnssmith/react-user-avatar\n        // colors from https://flatuicolors.com/\n        const colors = [\n            carrot,\n            emerald,\n            peterRiver,\n            wisteria,\n            alizarin,\n            turquoise,\n            midnightBlue,\n        ];\n        this.avatarColor = colors[sumChars % colors.length];\n    }\n    renderAvatar() {\n        const { user } = this.props;\n        if (user) {\n            if (typeof user.avatar === 'function') {\n                return user.avatar([styles.avatarStyle, this.props.avatarStyle]);\n            }\n            else if (typeof user.avatar === 'string') {\n                return (<Image source={{ uri: user.avatar }} style={[styles.avatarStyle, this.props.avatarStyle]}/>);\n            }\n            else if (typeof user.avatar === 'number') {\n                return (<Image source={user.avatar} style={[styles.avatarStyle, this.props.avatarStyle]}/>);\n            }\n        }\n        return null;\n    }\n    renderInitials() {\n        return (<Text style={[styles.textStyle, this.props.textStyle]}>\n        {this.avatarName}\n      </Text>);\n    }\n    render() {\n        if (!this.props.user ||\n            (!this.props.user.name && !this.props.user.avatar)) {\n            // render placeholder\n            return (<View style={[\n                    styles.avatarStyle,\n                    styles.avatarTransparent,\n                    this.props.avatarStyle,\n                ]} accessibilityRole='image'/>);\n        }\n        if (this.props.user.avatar) {\n            return (<TouchableOpacity disabled={!this.props.onPress} onPress={this.props.onPress} onLongPress={this.props.onLongPress} accessibilityRole='image'>\n          {this.renderAvatar()}\n        </TouchableOpacity>);\n        }\n        this.setAvatarColor();\n        return (<TouchableOpacity disabled={!this.props.onPress} onPress={this.props.onPress} onLongPress={this.props.onLongPress} style={[\n                styles.avatarStyle,\n                { backgroundColor: this.avatarColor },\n                this.props.avatarStyle,\n            ]} accessibilityRole='image'>\n        {this.renderInitials()}\n      </TouchableOpacity>);\n    }\n}\nGiftedAvatar.defaultProps = {\n    user: {\n        name: null,\n        avatar: null,\n    },\n    onPress: undefined,\n    onLongPress: undefined,\n    avatarStyle: {},\n    textStyle: {},\n};\nGiftedAvatar.propTypes = {\n    user: PropTypes.object,\n    onPress: PropTypes.func,\n    onLongPress: PropTypes.func,\n    avatarStyle: StylePropType,\n    textStyle: StylePropType,\n};\n//# sourceMappingURL=GiftedAvatar.js.map"]},"metadata":{},"sourceType":"module"}