{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nvar _excluded = [\"type\"],\n    _excluded2 = [\"style\"],\n    _excluded3 = [\"parse\", \"childrenProps\"];\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport React from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport PropTypes from 'prop-types';\nimport TextExtraction from \"./lib/TextExtraction\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport var PATTERNS = {\n  url: /(https?:\\/\\/|www\\.)[-a-zA-Z0-9@:%._\\+~#=]{1,256}\\.(xn--)?[a-z0-9-]{2,20}\\b([-a-zA-Z0-9@:%_\\+\\[\\],.~#?&\\/=]*[-a-zA-Z0-9@:%_\\+\\]~#?&\\/=])*/i,\n  phone: /[\\+]?[(]?[0-9]{3}[)]?[-\\s\\.]?[0-9]{3}[-\\s\\.]?[0-9]{4,7}/,\n  email: /\\S+@\\S+\\.\\S+/\n};\nvar defaultParseShape = PropTypes.shape(_objectSpread(_objectSpread({}, Text.propTypes), {}, {\n  type: PropTypes.oneOf(Object.keys(PATTERNS)).isRequired,\n  nonExhaustiveMaxMatchCount: PropTypes.number\n}));\nvar customParseShape = PropTypes.shape(_objectSpread(_objectSpread({}, Text.propTypes), {}, {\n  pattern: PropTypes.oneOfType([PropTypes.string, PropTypes.instanceOf(RegExp)]).isRequired,\n  nonExhaustiveMaxMatchCount: PropTypes.number\n}));\n\nvar ParsedText = function (_React$Component) {\n  _inherits(ParsedText, _React$Component);\n\n  var _super = _createSuper(ParsedText);\n\n  function ParsedText() {\n    _classCallCheck(this, ParsedText);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(ParsedText, [{\n    key: \"setNativeProps\",\n    value: function setNativeProps(nativeProps) {\n      this._root.setNativeProps(nativeProps);\n    }\n  }, {\n    key: \"getPatterns\",\n    value: function getPatterns() {\n      return this.props.parse.map(function (option) {\n        var type = option.type,\n            patternOption = _objectWithoutProperties(option, _excluded);\n\n        if (type) {\n          if (!PATTERNS[type]) {\n            throw new Error(option.type + \" is not a supported type\");\n          }\n\n          patternOption.pattern = PATTERNS[type];\n        }\n\n        return patternOption;\n      });\n    }\n  }, {\n    key: \"getParsedText\",\n    value: function getParsedText() {\n      var _this = this;\n\n      if (!this.props.parse) {\n        return this.props.children;\n      }\n\n      if (typeof this.props.children !== 'string') {\n        return this.props.children;\n      }\n\n      var textExtraction = new TextExtraction(this.props.children, this.getPatterns());\n      return textExtraction.parse().map(function (props, index) {\n        var parentStyle = _this.props.style;\n\n        var style = props.style,\n            remainder = _objectWithoutProperties(props, _excluded2);\n\n        return _jsx(Text, _objectSpread(_objectSpread({\n          style: [parentStyle, style]\n        }, _this.props.childrenProps), remainder), \"parsedText-\" + index);\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = _objectSpread({}, this.props),\n          parse = _this$props.parse,\n          childrenProps = _this$props.childrenProps,\n          remainder = _objectWithoutProperties(_this$props, _excluded3);\n\n      return _jsx(Text, _objectSpread(_objectSpread({\n        ref: function ref(_ref) {\n          return _this2._root = _ref;\n        }\n      }, remainder), {}, {\n        children: this.getParsedText()\n      }));\n    }\n  }]);\n\n  return ParsedText;\n}(React.Component);\n\nParsedText.displayName = 'ParsedText';\nParsedText.propTypes = _objectSpread(_objectSpread({}, Text.propTypes), {}, {\n  parse: PropTypes.arrayOf(PropTypes.oneOfType([defaultParseShape, customParseShape])),\n  childrenProps: PropTypes.shape(Text.propTypes)\n});\nParsedText.defaultProps = {\n  parse: null,\n  childrenProps: {}\n};\nexport default ParsedText;","map":{"version":3,"names":["React","PropTypes","TextExtraction","PATTERNS","url","phone","email","defaultParseShape","shape","Text","propTypes","type","oneOf","Object","keys","isRequired","nonExhaustiveMaxMatchCount","number","customParseShape","pattern","oneOfType","string","instanceOf","RegExp","ParsedText","nativeProps","_root","setNativeProps","props","parse","map","option","patternOption","Error","children","textExtraction","getPatterns","index","parentStyle","style","remainder","childrenProps","ref","getParsedText","Component","displayName","arrayOf","defaultProps"],"sources":["/Users/hanyang/Orbital2022/node_modules/react-native-parsed-text/src/ParsedText.js"],"sourcesContent":["import React from 'react';\nimport { Text } from 'react-native';\nimport PropTypes from 'prop-types';\n\nimport TextExtraction from './lib/TextExtraction';\n\n/**\n * This is a list of the known patterns that are provided by this library\n * @typedef {('url'|'phone'|'email')} KnownParsePattern\n */\n/**\n * @type {Object.<string, RegExp>}\n * // The keys really should be KnownParsePattern -- but this is unsupported in jsdoc, sadly\n */\nexport const PATTERNS = {\n  /**\n   * Segments/Features:\n   *  - http/https support https?\n   *  - auto-detecting loose domains if preceded by `www.`\n   *  - Localized & Long top-level domains \\.(xn--)?[a-z0-9-]{2,20}\\b\n   *  - Allowed query parameters & values, it's two blocks of matchers\n   *    ([-a-zA-Z0-9@:%_\\+,.~#?&\\/=]*[-a-zA-Z0-9@:%_\\+~#?&\\/=])*\n   *    - First block is [-a-zA-Z0-9@:%_\\+\\[\\],.~#?&\\/=]* -- this matches parameter names & values (including commas, dots, opening & closing brackets)\n   *    - The first block must be followed by a closing block [-a-zA-Z0-9@:%_\\+\\]~#?&\\/=] -- this doesn't match commas, dots, and opening brackets\n   */\n  url: /(https?:\\/\\/|www\\.)[-a-zA-Z0-9@:%._\\+~#=]{1,256}\\.(xn--)?[a-z0-9-]{2,20}\\b([-a-zA-Z0-9@:%_\\+\\[\\],.~#?&\\/=]*[-a-zA-Z0-9@:%_\\+\\]~#?&\\/=])*/i,\n  phone: /[\\+]?[(]?[0-9]{3}[)]?[-\\s\\.]?[0-9]{3}[-\\s\\.]?[0-9]{4,7}/,\n  email: /\\S+@\\S+\\.\\S+/,\n};\n\n/**\n * This is for built-in-patterns already supported by this library\n * Note: any additional keys/props are permitted, and will be passed along as props to the <Text> component!\n * @typedef {Object} DefaultParseShape\n * @property {KnownParsePattern} [type] key of the known pattern you'd like to configure\n * @property {number} [nonExhaustiveModeMaxMatchCount] Enables \"non-exhaustive mode\", where you can limit how many matches are found. -- Must be a positive integer or Infinity matches are permitted\n * @property {Function} [renderText] arbitrary function to rewrite the matched string into something else\n * @property {Function} [onPress]\n * @property {Function} [onLongPress]\n */\nconst defaultParseShape = PropTypes.shape({\n  ...Text.propTypes,\n  type: PropTypes.oneOf(Object.keys(PATTERNS)).isRequired,\n  nonExhaustiveMaxMatchCount: PropTypes.number,\n});\n\nconst customParseShape = PropTypes.shape({\n  ...Text.propTypes,\n  pattern: PropTypes.oneOfType([PropTypes.string, PropTypes.instanceOf(RegExp)])\n    .isRequired,\n  nonExhaustiveMaxMatchCount: PropTypes.number,\n});\n\n/**\n * The props added by this component\n * @typedef {DefaultParseShape|import('./lib/TextExtraction').CustomParseShape} ParsedTextAddedProps\n * @property {ParseShape[]} parse\n * @property {import('react-native').TextProps} childrenProps -- the props set on each child Text component\n */\n/** @typedef {ParsedTextAddedProps & import('react-native').TextProps} ParsedTextProps */\n\n/** @type {import('react').ComponentClass<ParsedTextProps>} */\nclass ParsedText extends React.Component {\n  static displayName = 'ParsedText';\n\n  static propTypes = {\n    ...Text.propTypes,\n    parse: PropTypes.arrayOf(\n      PropTypes.oneOfType([defaultParseShape, customParseShape]),\n    ),\n    childrenProps: PropTypes.shape(Text.propTypes),\n  };\n\n  static defaultProps = {\n    parse: null,\n    childrenProps: {},\n  };\n\n  setNativeProps(nativeProps) {\n    this._root.setNativeProps(nativeProps);\n  }\n  /** @returns {import('./lib/TextExtraction').CustomParseShape[]} */\n  getPatterns() {\n    return this.props.parse.map((option) => {\n      const { type, ...patternOption } = option;\n      if (type) {\n        if (!PATTERNS[type]) {\n          throw new Error(`${option.type} is not a supported type`);\n        }\n        patternOption.pattern = PATTERNS[type];\n      }\n\n      return patternOption;\n    });\n  }\n\n  getParsedText() {\n    if (!this.props.parse) {\n      return this.props.children;\n    }\n    if (typeof this.props.children !== 'string') {\n      return this.props.children;\n    }\n\n    const textExtraction = new TextExtraction(\n      this.props.children,\n      this.getPatterns(),\n    );\n\n    return textExtraction.parse().map((props, index) => {\n      const { style: parentStyle } = this.props;\n      const { style, ...remainder } = props;\n      return (\n        <Text\n          key={`parsedText-${index}`}\n          style={[parentStyle, style]}\n          {...this.props.childrenProps}\n          {...remainder}\n        />\n      );\n    });\n  }\n\n  render() {\n    // Discard custom props before passing remainder to Text\n    const { parse, childrenProps, ...remainder } = { ...this.props };\n\n    return (\n      <Text ref={(ref) => (this._root = ref)} {...remainder}>\n        {this.getParsedText()}\n      </Text>\n    );\n  }\n}\n\nexport default ParsedText;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}